{
  "address": "0x4dAbF22d61B7CF3941818f3Be9a42302753d0FDA",
  "abi": [
    {
      "inputs": [],
      "name": "Access_OnlyAdmin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newDescription",
          "type": "string"
        }
      ],
      "name": "DescriptionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "animationURI",
          "type": "string"
        }
      ],
      "name": "EditionInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "animationURI",
          "type": "string"
        }
      ],
      "name": "MediaURIsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initializeWithData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfos",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newDescription",
          "type": "string"
        }
      ],
      "name": "updateDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationURI",
          "type": "string"
        }
      ],
      "name": "updateMediaURIs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x70c321d38c4650a6d963a0ae5a0cf6d160bec72027b38f354d894c3217870277",
  "receipt": {
    "to": null,
    "from": "0xd078E391cBAEAa6C5785124a7207ff57d64604b7",
    "contractAddress": "0x4dAbF22d61B7CF3941818f3Be9a42302753d0FDA",
    "transactionIndex": 56,
    "gasUsed": "1970205",
    "logsBloom": "0x
    "blockHash": "0xb74470dd8e1c7a876ddc0ea6964347edf27c6d52e9d5261ee872211ca420a8db",
    "transactionHash": "0x70c321d38c4650a6d963a0ae5a0cf6d160bec72027b38f354d894c3217870277",
    "logs": [],
    "blockNumber": 8465435,
    "cumulativeGasUsed": "27927037",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "460c9c81ea6d5ccfd94ebee5fc859457",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Access_OnlyAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"DescriptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"EditionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"MediaURIsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initializeWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"updateMediaURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DescriptionUpdated(address,address,string)\":{\"details\":\"admin function indexer feedback\"},\"EditionInitialized(address,string,string,string)\":{\"details\":\"admin function indexer feedback\"}},\"kind\":\"dev\",\"methods\":{\"contractURI()\":{\"returns\":{\"_0\":\"contract uri (if set)\"}},\"initializeWithData(bytes)\":{\"params\":{\"data\":\"data to init with\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"to get uri for\"},\"returns\":{\"_0\":\"contract uri (if set)\"}},\"updateDescription(address,string)\":{\"params\":{\"newDescription\":\"new description\",\"target\":\"target description\"}},\"updateMediaURIs(address,string,string)\":{\"params\":{\"animationURI\":\"new animation uri address\",\"imageURI\":\"new image uri address\",\"target\":\"target for contract to update metadata for\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DescriptionUpdated(address,address,string)\":{\"notice\":\"Description updated for this edition\"},\"EditionInitialized(address,string,string,string)\":{\"notice\":\"Event for a new edition initialized\"},\"MediaURIsUpdated(address,address,string,string)\":{\"notice\":\"Event for updated Media URIs\"}},\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"Contract URI information getter\"},\"initializeWithData(bytes)\":{\"notice\":\"Default initializer for edition data from a specific contract\"},\"tokenInfos(address)\":{\"notice\":\"Token information mapping storage\"},\"tokenURI(uint256)\":{\"notice\":\"Token URI information getter\"},\"updateDescription(address,string)\":{\"notice\":\"Admin function to update description\"},\"updateMediaURIs(address,string,string)\":{\"notice\":\"Update media URIs\"}},\"notice\":\"EditionMetadataRenderer for editions support\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/drops/metadata/EditionMetadataRenderer.sol\":\"EditionMetadataRenderer\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735393936343638323431\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":base64/=lib/base64/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/drops/interfaces/IHolographERC721Drop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IMetadataRenderer} from \\\"../interfaces/IMetadataRenderer.sol\\\";\\n\\n/// @notice Interface for HOLOGRAPH Drops contract\\ninterface IHolographERC721Drop {\\n  // Access errors\\n  /// @notice Only admin can access this function\\n  error Access_OnlyAdmin();\\n  /// @notice Missing the given role or admin access\\n  error Access_MissingRoleOrAdmin(bytes32 role);\\n  /// @notice Withdraw is not allowed by this user\\n  error Access_WithdrawNotAllowed();\\n  /// @notice Cannot withdraw funds due to ETH send failure.\\n  error Withdraw_FundsSendFailure();\\n\\n  /// @notice Thrown when the operator for the contract is not allowed\\n  /// @dev Used when strict enforcement of marketplaces for creator royalties is desired.\\n  error OperatorNotAllowed(address operator);\\n\\n  /// @notice Thrown when there is no active market filter address supported for the current chain\\n  /// @dev Used for enabling and disabling filter for the given chain.\\n  error MarketFilterAddressNotSupportedForChain();\\n\\n  /// @notice Used when the operator filter registry external call fails\\n  /// @dev Used for bubbling error up to clients.\\n  error RemoteOperatorFilterRegistryCallFailed();\\n\\n  // Sale/Purchase errors\\n  /// @notice Sale is inactive\\n  error Sale_Inactive();\\n  /// @notice Presale is inactive\\n  error Presale_Inactive();\\n  /// @notice Presale merkle root is invalid\\n  error Presale_MerkleNotApproved();\\n  /// @notice Wrong price for purchase\\n  error Purchase_WrongPrice(uint256 correctPrice);\\n  /// @notice NFT sold out\\n  error Mint_SoldOut();\\n  /// @notice Too many purchase for address\\n  error Purchase_TooManyForAddress();\\n  /// @notice Too many presale for address\\n  error Presale_TooManyForAddress();\\n\\n  // Admin errors\\n  /// @notice Royalty percentage too high\\n  error Setup_RoyaltyPercentageTooHigh(uint16 maxRoyaltyBPS);\\n  /// @notice Invalid admin upgrade address\\n  error Admin_InvalidUpgradeAddress(address proposedAddress);\\n  /// @notice Invalid fund recipient adress\\n  error Admin_InvalidFundRecipientAddress(address newRecipientAddress);\\n  /// @notice Unable to finalize an edition not marked as open (size set to uint64_max_value)\\n  error Admin_UnableToFinalizeNotOpenEdition();\\n\\n  /// @notice Event emitted for each sale\\n  /// @param to address sale was made to\\n  /// @param quantity quantity of the minted nfts\\n  /// @param pricePerToken price for each token\\n  /// @param firstPurchasedTokenId first purchased token ID (to get range add to quantity for max)\\n  event Sale(\\n    address indexed to,\\n    uint256 indexed quantity,\\n    uint256 indexed pricePerToken,\\n    uint256 firstPurchasedTokenId\\n  );\\n\\n  /// @notice Sales configuration has been changed\\n  /// @dev To access new sales configuration, use getter function.\\n  /// @param changedBy Changed by user\\n  event SalesConfigChanged(address indexed changedBy);\\n\\n  /// @notice Event emitted when the funds recipient is changed\\n  /// @param newAddress new address for the funds recipient\\n  /// @param changedBy address that the recipient is changed by\\n  event FundsRecipientChanged(address indexed newAddress, address indexed changedBy);\\n\\n  /// @notice Event emitted when the funds are withdrawn from the minting contract\\n  /// @param withdrawnBy address that issued the withdraw\\n  /// @param withdrawnTo address that the funds were withdrawn to\\n  /// @param amount amount that was withdrawn\\n  /// @param feeRecipient user getting withdraw fee (if any)\\n  /// @param feeAmount amount of the fee getting sent (if any)\\n  event FundsWithdrawn(\\n    address indexed withdrawnBy,\\n    address indexed withdrawnTo,\\n    uint256 amount,\\n    address feeRecipient,\\n    uint256 feeAmount\\n  );\\n\\n  /// @notice Event emitted when an open mint is finalized and further minting is closed forever on the contract.\\n  /// @param sender address sending close mint\\n  /// @param numberOfMints number of mints the contract is finalized at\\n  event OpenMintFinalized(address indexed sender, uint256 numberOfMints);\\n\\n  /// @notice Event emitted when metadata renderer is updated.\\n  /// @param sender address of the updater\\n  /// @param renderer new metadata renderer address\\n  event UpdatedMetadataRenderer(address sender, IMetadataRenderer renderer);\\n\\n  /// @notice Admin function to update the sales configuration settings\\n  /// @param publicSalePrice public sale price in ether\\n  /// @param maxSalePurchasePerAddress Max # of purchases (public) per address allowed\\n  /// @param publicSaleStart unix timestamp when the public sale starts\\n  /// @param publicSaleEnd unix timestamp when the public sale ends (set to 0 to disable)\\n  /// @param presaleStart unix timestamp when the presale starts\\n  /// @param presaleEnd unix timestamp when the presale ends\\n  /// @param presaleMerkleRoot merkle root for the presale information\\n  function setSaleConfiguration(\\n    uint104 publicSalePrice,\\n    uint32 maxSalePurchasePerAddress,\\n    uint64 publicSaleStart,\\n    uint64 publicSaleEnd,\\n    uint64 presaleStart,\\n    uint64 presaleEnd,\\n    bytes32 presaleMerkleRoot\\n  ) external;\\n\\n  /// @notice General configuration for NFT Minting and bookkeeping\\n  struct Configuration {\\n    /// @dev Metadata renderer (uint160)\\n    IMetadataRenderer metadataRenderer;\\n    /// @dev Total size of edition that can be minted (uint160+64 = 224)\\n    uint64 editionSize;\\n    /// @dev Royalty amount in bps (uint224+16 = 240)\\n    uint16 royaltyBPS;\\n    /// @dev Funds recipient for sale (new slot, uint160)\\n    address payable fundsRecipient;\\n  }\\n\\n  /// @notice Sales states and configuration\\n  /// @dev Uses 3 storage slots\\n  struct SalesConfiguration {\\n    /// @dev Public sale price (max ether value > 1000 ether with this value)\\n    uint104 publicSalePrice;\\n    /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)\\n    /// @dev Max purchase number per txn (90+32 = 122)\\n    uint32 maxSalePurchasePerAddress;\\n    /// @dev uint64 type allows for dates into 292 billion years\\n    /// @notice Public sale start timestamp (136+64 = 186)\\n    uint64 publicSaleStart;\\n    /// @notice Public sale end timestamp (186+64 = 250)\\n    uint64 publicSaleEnd;\\n    /// @notice Presale start timestamp\\n    /// @dev new storage slot\\n    uint64 presaleStart;\\n    /// @notice Presale end timestamp\\n    uint64 presaleEnd;\\n    /// @notice Presale merkle root\\n    bytes32 presaleMerkleRoot;\\n  }\\n\\n  /// @notice Return value for sales details to use with front-ends\\n  struct SaleDetails {\\n    // Synthesized status variables for sale and presale\\n    bool publicSaleActive;\\n    bool presaleActive;\\n    // Price for public sale\\n    uint256 publicSalePrice;\\n    // Timed sale actions for public sale\\n    uint64 publicSaleStart;\\n    uint64 publicSaleEnd;\\n    // Timed sale actions for presale\\n    uint64 presaleStart;\\n    uint64 presaleEnd;\\n    // Merkle root (includes address, quantity, and price data for each entry)\\n    bytes32 presaleMerkleRoot;\\n    // Limit public sale to a specific number of mints per wallet\\n    uint256 maxSalePurchasePerAddress;\\n    // Information about the rest of the supply\\n    // Total that have been minted\\n    uint256 totalMinted;\\n    // The total supply available\\n    uint256 maxSupply;\\n  }\\n\\n  /// @notice Return type of specific mint counts and details per address\\n  struct AddressMintDetails {\\n    /// Number of total mints from the given address\\n    uint256 totalMints;\\n    /// Number of presale mints from the given address\\n    uint256 presaleMints;\\n    /// Number of public mints from the given address\\n    uint256 publicMints;\\n  }\\n\\n  /// @notice External purchase function (payable in eth)\\n  /// @param quantity to purchase\\n  /// @return first minted token ID\\n  function purchase(uint256 quantity) external payable returns (uint256);\\n\\n  /// @notice External purchase presale function (takes a merkle proof and matches to root) (payable in eth)\\n  /// @param quantity to purchase\\n  /// @param maxQuantity can purchase (verified by merkle root)\\n  /// @param pricePerToken price per token allowed (verified by merkle root)\\n  /// @param merkleProof input for merkle proof leaf verified by merkle root\\n  /// @return first minted token ID\\n  function purchasePresale(\\n    uint256 quantity,\\n    uint256 maxQuantity,\\n    uint256 pricePerToken,\\n    bytes32[] memory merkleProof\\n  ) external payable returns (uint256);\\n\\n  /// @notice Function to return the global sales details for the given drop\\n  function saleDetails() external view returns (SaleDetails memory);\\n\\n  /// @notice Function to return the specific sales details for a given address\\n  /// @param minter address for minter to return mint information for\\n  function mintedPerAddress(address minter) external view returns (AddressMintDetails memory);\\n\\n  /// @notice This is the opensea/public owner setting that can be set by the contract admin\\n  function owner() external view returns (address);\\n\\n  /// @notice Update the metadata renderer\\n  /// @param newRenderer new address for renderer\\n  /// @param setupRenderer data to call to bootstrap data for the new renderer (optional)\\n  function setMetadataRenderer(IMetadataRenderer newRenderer, bytes memory setupRenderer) external;\\n\\n  /// @notice This is an admin mint function to mint a quantity to a specific address\\n  /// @param to address to mint to\\n  /// @param quantity quantity to mint\\n  /// @return the id of the first minted NFT\\n  function adminMint(address to, uint256 quantity) external returns (uint256);\\n\\n  /// @notice This is an admin mint function to mint a single nft each to a list of addresses\\n  /// @param to list of addresses to mint an NFT each to\\n  /// @return the id of the first minted NFT\\n  function adminMintAirdrop(address[] memory to) external returns (uint256);\\n\\n  /// @dev Getter for admin role associated with the contract to handle metadata\\n  /// @return boolean if address is admin\\n  function isAdmin(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4cc58dd4967592821c6829e1cb877032ec99f795955226ec17260b3239b2468c\",\"license\":\"MIT\"},\"contracts/drops/interfaces/IMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IMetadataRenderer {\\n  function tokenURI(uint256) external view returns (string memory);\\n\\n  function contractURI() external view returns (string memory);\\n\\n  function initializeWithData(bytes memory initData) external;\\n}\\n\",\"keccak256\":\"0x198181176c0cbc5720b191440492b298c353754d172e2d864ab6596a52fbc07c\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xf710fb524203921ca2fca7201672900fbfb354a37b56dd3f4f2e1592b3edb999\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xc0e1ac396ac591a4c38ddcdd220321128eb94424d73e41a573cf58d5c643af38\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/drops/metadata/EditionMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IMetadataRenderer} from \\\"../interfaces/IMetadataRenderer.sol\\\";\\nimport {IHolographERC721Drop} from \\\"../interfaces/IHolographERC721Drop.sol\\\";\\nimport {IERC721MetadataUpgradeable} from \\\"../lib/openzeppelin-contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\\\";\\nimport {IERC2981Upgradeable} from \\\"../lib/openzeppelin-contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {NFTMetadataRenderer} from \\\"../utils/NFTMetadataRenderer.sol\\\";\\nimport {MetadataRenderAdminCheck} from \\\"./MetadataRenderAdminCheck.sol\\\";\\n\\ninterface DropConfigGetter {\\n  function config() external view returns (IHolographERC721Drop.Configuration memory config);\\n}\\n\\n/// @notice EditionMetadataRenderer for editions support\\ncontract EditionMetadataRenderer is IMetadataRenderer, MetadataRenderAdminCheck {\\n  /// @notice Storage for token edition information\\n  struct TokenEditionInfo {\\n    string description;\\n    string imageURI;\\n    string animationURI;\\n  }\\n\\n  /// @notice Event for updated Media URIs\\n  event MediaURIsUpdated(address indexed target, address sender, string imageURI, string animationURI);\\n\\n  /// @notice Event for a new edition initialized\\n  /// @dev admin function indexer feedback\\n  event EditionInitialized(address indexed target, string description, string imageURI, string animationURI);\\n\\n  /// @notice Description updated for this edition\\n  /// @dev admin function indexer feedback\\n  event DescriptionUpdated(address indexed target, address sender, string newDescription);\\n\\n  /// @notice Token information mapping storage\\n  mapping(address => TokenEditionInfo) public tokenInfos;\\n\\n  /// @notice Update media URIs\\n  /// @param target target for contract to update metadata for\\n  /// @param imageURI new image uri address\\n  /// @param animationURI new animation uri address\\n  function updateMediaURIs(\\n    address target,\\n    string memory imageURI,\\n    string memory animationURI\\n  ) external requireSenderAdmin(target) {\\n    tokenInfos[target].imageURI = imageURI;\\n    tokenInfos[target].animationURI = animationURI;\\n    emit MediaURIsUpdated({target: target, sender: msg.sender, imageURI: imageURI, animationURI: animationURI});\\n  }\\n\\n  /// @notice Admin function to update description\\n  /// @param target target description\\n  /// @param newDescription new description\\n  function updateDescription(address target, string memory newDescription) external requireSenderAdmin(target) {\\n    tokenInfos[target].description = newDescription;\\n\\n    emit DescriptionUpdated({target: target, sender: msg.sender, newDescription: newDescription});\\n  }\\n\\n  /// @notice Default initializer for edition data from a specific contract\\n  /// @param data data to init with\\n  function initializeWithData(bytes memory data) external {\\n    // data format: description, imageURI, animationURI\\n    (string memory description, string memory imageURI, string memory animationURI) = abi.decode(\\n      data,\\n      (string, string, string)\\n    );\\n\\n    tokenInfos[msg.sender] = TokenEditionInfo({\\n      description: description,\\n      imageURI: imageURI,\\n      animationURI: animationURI\\n    });\\n    emit EditionInitialized({\\n      target: msg.sender,\\n      description: description,\\n      imageURI: imageURI,\\n      animationURI: animationURI\\n    });\\n  }\\n\\n  /// @notice Contract URI information getter\\n  /// @return contract uri (if set)\\n  function contractURI() external view override returns (string memory) {\\n    address target = msg.sender;\\n    TokenEditionInfo storage editionInfo = tokenInfos[target];\\n    IHolographERC721Drop.Configuration memory config = DropConfigGetter(target).config();\\n\\n    return\\n      NFTMetadataRenderer.encodeContractURIJSON({\\n        name: IERC721MetadataUpgradeable(target).name(),\\n        description: editionInfo.description,\\n        imageURI: editionInfo.imageURI,\\n        animationURI: editionInfo.animationURI,\\n        royaltyBPS: uint256(config.royaltyBPS),\\n        royaltyRecipient: config.fundsRecipient\\n      });\\n  }\\n\\n  /// @notice Token URI information getter\\n  /// @param tokenId to get uri for\\n  /// @return contract uri (if set)\\n  function tokenURI(uint256 tokenId) external view override returns (string memory) {\\n    address target = msg.sender;\\n\\n    TokenEditionInfo memory info = tokenInfos[target];\\n    IHolographERC721Drop media = IHolographERC721Drop(target);\\n\\n    uint256 maxSupply = media.saleDetails().maxSupply;\\n\\n    // For open editions, set max supply to 0 for renderer to remove the edition max number\\n    // This will be added back on once the open edition is \\\"finalized\\\"\\n    if (maxSupply == type(uint64).max) {\\n      maxSupply = 0;\\n    }\\n\\n    return\\n      NFTMetadataRenderer.createMetadataEdition({\\n        name: IERC721MetadataUpgradeable(target).name(),\\n        description: info.description,\\n        imageURI: info.imageURI,\\n        animationURI: info.animationURI,\\n        tokenOfEdition: tokenId,\\n        editionSize: maxSupply\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0xe242a1aae8444976170a8708f8c75ada9503693fe71494b59ca563c495a16dd0\",\"license\":\"MIT\"},\"contracts/drops/metadata/MetadataRenderAdminCheck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IHolographERC721Drop} from \\\"../interfaces/IHolographERC721Drop.sol\\\";\\n\\ncontract MetadataRenderAdminCheck {\\n  error Access_OnlyAdmin();\\n\\n  /// @notice Modifier to require the sender to be an admin\\n  /// @param target address that the user wants to modify\\n  modifier requireSenderAdmin(address target) {\\n    if (target != msg.sender && !IHolographERC721Drop(target).isAdmin(msg.sender)) {\\n      revert Access_OnlyAdmin();\\n    }\\n\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8911bdd4d6d8cb23224fc687f08dcbb1f4f99541afcc9cf5e4c08df4792ae64e\",\"license\":\"MIT\"},\"contracts/drops/utils/NFTMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport {Base64} from \\\"lib/openzeppelin-contracts/contracts/utils/Base64.sol\\\";\\n\\n/// NFT metadata library for rendering metadata associated with editions\\nlibrary NFTMetadataRenderer {\\n  /// Generate edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param imageURI URI of image to render for edition\\n  /// @param animationURI URI of animation to render for edition\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataEdition(\\n    string memory name,\\n    string memory description,\\n    string memory imageURI,\\n    string memory animationURI,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) internal pure returns (string memory) {\\n    string memory _tokenMediaData = tokenMediaData(imageURI, animationURI);\\n    bytes memory json = createMetadataJSON(name, description, _tokenMediaData, tokenOfEdition, editionSize);\\n    return encodeMetadataJSON(json);\\n  }\\n\\n  function encodeContractURIJSON(\\n    string memory name,\\n    string memory description,\\n    string memory imageURI,\\n    string memory animationURI,\\n    uint256 royaltyBPS,\\n    address royaltyRecipient\\n  ) internal pure returns (string memory) {\\n    bytes memory imageSpace = bytes(\\\"\\\");\\n    if (bytes(imageURI).length > 0) {\\n      imageSpace = abi.encodePacked('\\\", \\\"image\\\": \\\"', imageURI);\\n    }\\n    bytes memory animationSpace = bytes(\\\"\\\");\\n    if (bytes(animationURI).length > 0) {\\n      animationSpace = abi.encodePacked('\\\", \\\"animation_url\\\": \\\"', animationURI);\\n    }\\n\\n    return\\n      string(\\n        encodeMetadataJSON(\\n          abi.encodePacked(\\n            '{\\\"name\\\": \\\"',\\n            name,\\n            '\\\", \\\"description\\\": \\\"',\\n            description,\\n            // this is for opensea since they don't respect ERC2981 right now\\n            '\\\", \\\"seller_fee_basis_points\\\": ',\\n            Strings.toString(royaltyBPS),\\n            ', \\\"fee_recipient\\\": \\\"',\\n            Strings.toHexString(uint256(uint160(royaltyRecipient)), 20),\\n            imageSpace,\\n            animationSpace,\\n            '\\\"}'\\n          )\\n        )\\n      );\\n  }\\n\\n  /// Function to create the metadata json string for the nft edition\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param mediaData Data for media to include in json object\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataJSON(\\n    string memory name,\\n    string memory description,\\n    string memory mediaData,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) internal pure returns (bytes memory) {\\n    bytes memory editionSizeText;\\n    if (editionSize > 0) {\\n      editionSizeText = abi.encodePacked(\\\"/\\\", Strings.toString(editionSize));\\n    }\\n    return\\n      abi.encodePacked(\\n        '{\\\"name\\\": \\\"',\\n        name,\\n        \\\" \\\",\\n        Strings.toString(tokenOfEdition),\\n        editionSizeText,\\n        '\\\", \\\"',\\n        'description\\\": \\\"',\\n        description,\\n        '\\\", \\\"',\\n        mediaData,\\n        'properties\\\": {\\\"number\\\": ',\\n        Strings.toString(tokenOfEdition),\\n        ', \\\"name\\\": \\\"',\\n        name,\\n        '\\\"}}'\\n      );\\n  }\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) internal pure returns (string memory) {\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(json)));\\n  }\\n\\n  /// Generates edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  function tokenMediaData(string memory imageUrl, string memory animationUrl) internal pure returns (string memory) {\\n    bool hasImage = bytes(imageUrl).length > 0;\\n    bool hasAnimation = bytes(animationUrl).length > 0;\\n    if (hasImage && hasAnimation) {\\n      return string(abi.encodePacked('image\\\": \\\"', imageUrl, '\\\", \\\"animation_url\\\": \\\"', animationUrl, '\\\", \\\"'));\\n    }\\n    if (hasImage) {\\n      return string(abi.encodePacked('image\\\": \\\"', imageUrl, '\\\", \\\"'));\\n    }\\n    if (hasAnimation) {\\n      return string(abi.encodePacked('animation_url\\\": \\\"', animationUrl, '\\\", \\\"'));\\n    }\\n\\n    return \\\"\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x308a15b51dd24a855e115edd001ff9fe99b4ddc7af2a7d0a000aa992634cbbe4\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506122dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063ba46ae7211610050578063ba46ae72146100b2578063c87b56dd146100dd578063e8a3d485146100fd57600080fd5b80632f17b8f014610077578063856a7ffa1461008c5780638bbb2cf21461009f575b600080fd5b61008a61008536600461165d565b610105565b005b61008a61009a3660046116d3565b6102bc565b61008a6100ad366004611724565b61038b565b6100c56100c0366004611774565b6104fe565b6040516100d49392919061180b565b60405180910390f35b6100f06100eb366004611844565b6106b8565b6040516100d4919061185d565b6100f06109ea565b8273ffffffffffffffffffffffffffffffffffffffff811633148015906101b757506040517f24d7806c00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8216906324d7806c90602401602060405180830381865afa158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b59190611885565b155b156101ee576040517f02bd6bd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208181526040909120845161022892600190920191860190611453565b5073ffffffffffffffffffffffffffffffffffffffff8416600090815260208181526040909120835161026392600290920191850190611453565b508373ffffffffffffffffffffffffffffffffffffffff167fc4c1b9223fcebe5f35b9030d3df655018c40e88d70b8a3c63ed851c5d972210f3385856040516102ae939291906118a0565b60405180910390a250505050565b6000806000838060200190518101906102d59190611926565b604080516060810182528481526020808201859052818301849052336000908152808252929092208151805196995094975092955093919261031d9284929190910190611453565b5060208281015180516103369260018501920190611453565b5060408201518051610352916002840191602090910190611453565b50506040513391507ff889a5cdc62274389379cbfade0f225b1d30b7395177fd6aeaab61662b1c6edf906102ae9086908690869061180b565b8173ffffffffffffffffffffffffffffffffffffffff8116331480159061043d57506040517f24d7806c00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8216906324d7806c90602401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190611885565b155b15610474576040517f02bd6bd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526020818152604090912083516104a892850190611453565b508273ffffffffffffffffffffffffffffffffffffffff167f36195b44a3184513e02477929207751ea9d67026b917ed74d374a7f9e8c5e4d133846040516104f19291906119a4565b60405180910390a2505050565b600060208190529081526040902080548190610519906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610545906119d3565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050908060010180546105a7906119d3565b80601f01602080910402602001604051908101604052809291908181526020018280546105d3906119d3565b80156106205780601f106105f557610100808354040283529160200191610620565b820191906000526020600020905b81548152906001019060200180831161060357829003601f168201915b505050505090806002018054610635906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610661906119d3565b80156106ae5780601f10610683576101008083540402835291602001916106ae565b820191906000526020600020905b81548152906001019060200180831161069157829003601f168201915b5050505050905083565b3360008181526020819052604080822081516060818101909352815492949392909190829082906106e8906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610714906119d3565b80156107615780601f1061073657610100808354040283529160200191610761565b820191906000526020600020905b81548152906001019060200180831161074457829003601f168201915b5050505050815260200160018201805461077a906119d3565b80601f01602080910402602001604051908101604052809291908181526020018280546107a6906119d3565b80156107f35780601f106107c8576101008083540402835291602001916107f3565b820191906000526020600020905b8154815290600101906020018083116107d657829003601f168201915b5050505050815260200160028201805461080c906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610838906119d3565b80156108855780601f1061085a57610100808354040283529160200191610885565b820191906000526020600020905b81548152906001019060200180831161086857829003601f168201915b5050505050815250509050600082905060008173ffffffffffffffffffffffffffffffffffffffff16633474a4a66040518163ffffffff1660e01b815260040161016060405180830381865afa1580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190611a3e565b610140015190507fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000018101610939575060005b6109e08473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109cd9190810190611af7565b8451602086015160408701518a86610cce565b9695505050505050565b3360008181526020819052604080822081517f79502c55000000000000000000000000000000000000000000000000000000008152915160609493919284916379502c55916004808201926080929091908290030181865afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a789190611b2c565b9050610cc68373ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ac8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b0e9190810190611af7565b83548490610b1b906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b47906119d3565b8015610b945780601f10610b6957610100808354040283529160200191610b94565b820191906000526020600020905b815481529060010190602001808311610b7757829003601f168201915b5050505050846001018054610ba8906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd4906119d3565b8015610c215780601f10610bf657610100808354040283529160200191610c21565b820191906000526020600020905b815481529060010190602001808311610c0457829003601f168201915b5050505050856002018054610c35906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c61906119d3565b8015610cae5780601f10610c8357610100808354040283529160200191610cae565b820191906000526020600020905b815481529060010190602001808311610c9157829003601f168201915b5050505050856040015161ffff168660600151610d05565b935050505090565b60606000610cdc8686610dd5565b90506000610ced8989848888610e65565b9050610cf881610ee1565b9998505050505050505050565b60408051602081019091526000815284516060919015610d425785604051602001610d309190611bd2565b60405160208183030381529060405290505b604080516020810190915260008152855115610d7b5785604051602001610d699190611c17565b60405160208183030381529060405290505b610cf88989610d8988610f12565b610daa8873ffffffffffffffffffffffffffffffffffffffff166014610fd0565b8686604051602001610dc196959493929190611c5c565b604051602081830303815290604052610ee1565b81518151606091158015911515908290610dec5750805b15610e1c578484604051602001610e04929190611db6565b60405160208183030381529060405292505050610e5f565b8115610e335784604051602001610e049190611e61565b8015610e4a5783604051602001610e049190611ecd565b60405180602001604052806000815250925050505b92915050565b6060808215610e9957610e7783610f12565b604051602001610e879190611f39565b60405160208183030381529060405290505b86610ea385610f12565b828888610eaf89610f12565b8c604051602001610ec69796959493929190611f7e565b60405160208183030381529060405291505095945050505050565b6060610eec8261121e565b604051602001610efc9190612128565b6040516020818303038152906040529050919050565b60606000610f1f83611371565b600101905060008167ffffffffffffffff811115610f3f57610f3f611511565b6040519080825280601f01601f191660200182016040528015610f69576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610f7357509392505050565b60606000610fdf83600261219c565b610fea9060026121d9565b67ffffffffffffffff81111561100257611002611511565b6040519080825280601f01601f19166020018201604052801561102c576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611063576110636121f1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106110c6576110c66121f1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061110284600261219c565b61110d9060016121d9565b90505b60018111156111aa577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061114e5761114e6121f1565b1a60f81b828281518110611164576111646121f1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936111a381612220565b9050611110565b508315611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b9392505050565b6060815160000361123d57505060408051602081019091526000815290565b6000604051806060016040528060408152602001612291604091399050600060038451600261126c91906121d9565b6112769190612255565b61128190600461219c565b67ffffffffffffffff81111561129957611299611511565b6040519080825280601f01601f1916602001820160405280156112c3576020820181803683370190505b509050600182016020820185865187015b8082101561132f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506112d4565b505060038651066001811461134b576002811461135e57611366565b603d6001830353603d6002830353611366565b603d60018303535b509195945050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106113ba577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106113e6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061140457662386f26fc10000830492506010015b6305f5e100831061141c576305f5e100830492506008015b612710831061143057612710830492506004015b60648310611442576064830492506002015b600a8310610e5f5760010192915050565b82805461145f906119d3565b90600052602060002090601f01602090048101928261148157600085556114c7565b82601f1061149a57805160ff19168380011785556114c7565b828001600101855582156114c7579182015b828111156114c75782518255916020019190600101906114ac565b506114d39291506114d7565b5090565b5b808211156114d357600081556001016114d8565b73ffffffffffffffffffffffffffffffffffffffff8116811461150e57600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171561156457611564611511565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115b1576115b1611511565b604052919050565b600067ffffffffffffffff8211156115d3576115d3611511565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061161261160d846115b9565b61156a565b905082815283838301111561162657600080fd5b828260208301376000602084830101529392505050565b600082601f83011261164e57600080fd5b611217838335602085016115ff565b60008060006060848603121561167257600080fd5b833561167d816114ec565b9250602084013567ffffffffffffffff8082111561169a57600080fd5b6116a68783880161163d565b935060408601359150808211156116bc57600080fd5b506116c98682870161163d565b9150509250925092565b6000602082840312156116e557600080fd5b813567ffffffffffffffff8111156116fc57600080fd5b8201601f8101841361170d57600080fd5b61171c848235602084016115ff565b949350505050565b6000806040838503121561173757600080fd5b8235611742816114ec565b9150602083013567ffffffffffffffff81111561175e57600080fd5b61176a8582860161163d565b9150509250929050565b60006020828403121561178657600080fd5b8135611217816114ec565b60005b838110156117ac578181015183820152602001611794565b838111156117bb576000848401525b50505050565b600081518084526117d9816020860160208601611791565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60608152600061181e60608301866117c1565b828103602084015261183081866117c1565b905082810360408401526109e081856117c1565b60006020828403121561185657600080fd5b5035919050565b60208152600061121760208301846117c1565b8051801515811461188057600080fd5b919050565b60006020828403121561189757600080fd5b61121782611870565b73ffffffffffffffffffffffffffffffffffffffff841681526060602082015260006118cf60608301856117c1565b82810360408401526109e081856117c1565b600082601f8301126118f257600080fd5b815161190061160d826115b9565b81815284602083860101111561191557600080fd5b61171c826020830160208701611791565b60008060006060848603121561193b57600080fd5b835167ffffffffffffffff8082111561195357600080fd5b61195f878388016118e1565b9450602086015191508082111561197557600080fd5b611981878388016118e1565b9350604086015191508082111561199757600080fd5b506116c9868287016118e1565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061171c60408301846117c1565b600181811c908216806119e757607f821691505b602082108103611a20577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b805167ffffffffffffffff8116811461188057600080fd5b60006101608284031215611a5157600080fd5b611a59611540565b611a6283611870565b8152611a7060208401611870565b602082015260408301516040820152611a8b60608401611a26565b6060820152611a9c60808401611a26565b6080820152611aad60a08401611a26565b60a0820152611abe60c08401611a26565b60c082015260e0838101519082015261010080840151908201526101208084015190820152610140928301519281019290925250919050565b600060208284031215611b0957600080fd5b815167ffffffffffffffff811115611b2057600080fd5b61171c848285016118e1565b600060808284031215611b3e57600080fd5b6040516080810181811067ffffffffffffffff82111715611b6157611b61611511565b6040528251611b6f816114ec565b8152611b7d60208401611a26565b6020820152604083015161ffff81168114611b9757600080fd5b60408201526060830151611baa816114ec565b60608201529392505050565b60008151611bc8818560208601611791565b9290920192915050565b7f222c2022696d616765223a202200000000000000000000000000000000000000815260008251611c0a81600d850160208701611791565b91909101600d0192915050565b7f222c2022616e696d6174696f6e5f75726c223a20220000000000000000000000815260008251611c4f816015850160208701611791565b9190910160150192915050565b7f7b226e616d65223a2022000000000000000000000000000000000000000000008152600087516020611c9582600a8601838d01611791565b7f222c20226465736372697074696f6e223a202200000000000000000000000000600a928501928301528851611cd181601d8501848d01611791565b7f222c202273656c6c65725f6665655f62617369735f706f696e7473223a200000601d93909101928301528751611d0e81603b8501848c01611791565b7f2c20226665655f726563697069656e74223a2022000000000000000000000000603b93909101928301528651611d4b81604f8501848b01611791565b8651920191611d6081604f8501848a01611791565b8551920191611d7581604f8501848901611791565b611da7604f828501017f227d000000000000000000000000000000000000000000000000000000000000815260020190565b9b9a5050505050505050505050565b7f696d616765223a20220000000000000000000000000000000000000000000000815260008351611dee816009850160208801611791565b7f222c2022616e696d6174696f6e5f75726c223a202200000000000000000000006009918401918201528351611e2b81601e840160208801611791565b7f222c202200000000000000000000000000000000000000000000000000000000601e9290910191820152602201949350505050565b7f696d616765223a20220000000000000000000000000000000000000000000000815260008251611e99816009850160208701611791565b7f222c2022000000000000000000000000000000000000000000000000000000006009939091019283015250600d01919050565b7f616e696d6174696f6e5f75726c223a2022000000000000000000000000000000815260008251611f05816011850160208701611791565b7f222c2022000000000000000000000000000000000000000000000000000000006011939091019283015250601501919050565b7f2f00000000000000000000000000000000000000000000000000000000000000815260008251611f71816001850160208701611791565b9190910160010192915050565b7f7b226e616d65223a202200000000000000000000000000000000000000000000815260008851611fb681600a850160208d01611791565b7f2000000000000000000000000000000000000000000000000000000000000000600a918401918201528851611ff381600b840160208d01611791565b885191019061200981600b840160208c01611791565b8082019150507f222c20220000000000000000000000000000000000000000000000000000000080600b8301527f6465736372697074696f6e223a20220000000000000000000000000000000000600f830152875161206f81601e850160208c01611791565b601e92019182015261211a6120f16120eb6120c26120bc612093602287018c611bb6565b7f70726f70657274696573223a207b226e756d626572223a200000000000000000815260180190565b89611bb6565b7f2c20226e616d65223a20220000000000000000000000000000000000000000008152600b0190565b86611bb6565b7f227d7d0000000000000000000000000000000000000000000000000000000000815260030190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161216081601d850160208701611791565b91909101601d0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121d4576121d461216d565b500290565b600082198211156121ec576121ec61216d565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008161222f5761222f61216d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008261228b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa164736f6c634300080d000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063ba46ae7211610050578063ba46ae72146100b2578063c87b56dd146100dd578063e8a3d485146100fd57600080fd5b80632f17b8f014610077578063856a7ffa1461008c5780638bbb2cf21461009f575b600080fd5b61008a61008536600461165d565b610105565b005b61008a61009a3660046116d3565b6102bc565b61008a6100ad366004611724565b61038b565b6100c56100c0366004611774565b6104fe565b6040516100d49392919061180b565b60405180910390f35b6100f06100eb366004611844565b6106b8565b6040516100d4919061185d565b6100f06109ea565b8273ffffffffffffffffffffffffffffffffffffffff811633148015906101b757506040517f24d7806c00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8216906324d7806c90602401602060405180830381865afa158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b59190611885565b155b156101ee576040517f02bd6bd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208181526040909120845161022892600190920191860190611453565b5073ffffffffffffffffffffffffffffffffffffffff8416600090815260208181526040909120835161026392600290920191850190611453565b508373ffffffffffffffffffffffffffffffffffffffff167fc4c1b9223fcebe5f35b9030d3df655018c40e88d70b8a3c63ed851c5d972210f3385856040516102ae939291906118a0565b60405180910390a250505050565b6000806000838060200190518101906102d59190611926565b604080516060810182528481526020808201859052818301849052336000908152808252929092208151805196995094975092955093919261031d9284929190910190611453565b5060208281015180516103369260018501920190611453565b5060408201518051610352916002840191602090910190611453565b50506040513391507ff889a5cdc62274389379cbfade0f225b1d30b7395177fd6aeaab61662b1c6edf906102ae9086908690869061180b565b8173ffffffffffffffffffffffffffffffffffffffff8116331480159061043d57506040517f24d7806c00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8216906324d7806c90602401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190611885565b155b15610474576040517f02bd6bd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526020818152604090912083516104a892850190611453565b508273ffffffffffffffffffffffffffffffffffffffff167f36195b44a3184513e02477929207751ea9d67026b917ed74d374a7f9e8c5e4d133846040516104f19291906119a4565b60405180910390a2505050565b600060208190529081526040902080548190610519906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610545906119d3565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050908060010180546105a7906119d3565b80601f01602080910402602001604051908101604052809291908181526020018280546105d3906119d3565b80156106205780601f106105f557610100808354040283529160200191610620565b820191906000526020600020905b81548152906001019060200180831161060357829003601f168201915b505050505090806002018054610635906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610661906119d3565b80156106ae5780601f10610683576101008083540402835291602001916106ae565b820191906000526020600020905b81548152906001019060200180831161069157829003601f168201915b5050505050905083565b3360008181526020819052604080822081516060818101909352815492949392909190829082906106e8906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610714906119d3565b80156107615780601f1061073657610100808354040283529160200191610761565b820191906000526020600020905b81548152906001019060200180831161074457829003601f168201915b5050505050815260200160018201805461077a906119d3565b80601f01602080910402602001604051908101604052809291908181526020018280546107a6906119d3565b80156107f35780601f106107c8576101008083540402835291602001916107f3565b820191906000526020600020905b8154815290600101906020018083116107d657829003601f168201915b5050505050815260200160028201805461080c906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610838906119d3565b80156108855780601f1061085a57610100808354040283529160200191610885565b820191906000526020600020905b81548152906001019060200180831161086857829003601f168201915b5050505050815250509050600082905060008173ffffffffffffffffffffffffffffffffffffffff16633474a4a66040518163ffffffff1660e01b815260040161016060405180830381865afa1580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190611a3e565b610140015190507fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000018101610939575060005b6109e08473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109cd9190810190611af7565b8451602086015160408701518a86610cce565b9695505050505050565b3360008181526020819052604080822081517f79502c55000000000000000000000000000000000000000000000000000000008152915160609493919284916379502c55916004808201926080929091908290030181865afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a789190611b2c565b9050610cc68373ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ac8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b0e9190810190611af7565b83548490610b1b906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b47906119d3565b8015610b945780601f10610b6957610100808354040283529160200191610b94565b820191906000526020600020905b815481529060010190602001808311610b7757829003601f168201915b5050505050846001018054610ba8906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd4906119d3565b8015610c215780601f10610bf657610100808354040283529160200191610c21565b820191906000526020600020905b815481529060010190602001808311610c0457829003601f168201915b5050505050856002018054610c35906119d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c61906119d3565b8015610cae5780601f10610c8357610100808354040283529160200191610cae565b820191906000526020600020905b815481529060010190602001808311610c9157829003601f168201915b5050505050856040015161ffff168660600151610d05565b935050505090565b60606000610cdc8686610dd5565b90506000610ced8989848888610e65565b9050610cf881610ee1565b9998505050505050505050565b60408051602081019091526000815284516060919015610d425785604051602001610d309190611bd2565b60405160208183030381529060405290505b604080516020810190915260008152855115610d7b5785604051602001610d699190611c17565b60405160208183030381529060405290505b610cf88989610d8988610f12565b610daa8873ffffffffffffffffffffffffffffffffffffffff166014610fd0565b8686604051602001610dc196959493929190611c5c565b604051602081830303815290604052610ee1565b81518151606091158015911515908290610dec5750805b15610e1c578484604051602001610e04929190611db6565b60405160208183030381529060405292505050610e5f565b8115610e335784604051602001610e049190611e61565b8015610e4a5783604051602001610e049190611ecd565b60405180602001604052806000815250925050505b92915050565b6060808215610e9957610e7783610f12565b604051602001610e879190611f39565b60405160208183030381529060405290505b86610ea385610f12565b828888610eaf89610f12565b8c604051602001610ec69796959493929190611f7e565b60405160208183030381529060405291505095945050505050565b6060610eec8261121e565b604051602001610efc9190612128565b6040516020818303038152906040529050919050565b60606000610f1f83611371565b600101905060008167ffffffffffffffff811115610f3f57610f3f611511565b6040519080825280601f01601f191660200182016040528015610f69576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610f7357509392505050565b60606000610fdf83600261219c565b610fea9060026121d9565b67ffffffffffffffff81111561100257611002611511565b6040519080825280601f01601f19166020018201604052801561102c576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611063576110636121f1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106110c6576110c66121f1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061110284600261219c565b61110d9060016121d9565b90505b60018111156111aa577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061114e5761114e6121f1565b1a60f81b828281518110611164576111646121f1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936111a381612220565b9050611110565b508315611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b9392505050565b6060815160000361123d57505060408051602081019091526000815290565b6000604051806060016040528060408152602001612291604091399050600060038451600261126c91906121d9565b6112769190612255565b61128190600461219c565b67ffffffffffffffff81111561129957611299611511565b6040519080825280601f01601f1916602001820160405280156112c3576020820181803683370190505b509050600182016020820185865187015b8082101561132f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506112d4565b505060038651066001811461134b576002811461135e57611366565b603d6001830353603d6002830353611366565b603d60018303535b509195945050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106113ba577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106113e6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061140457662386f26fc10000830492506010015b6305f5e100831061141c576305f5e100830492506008015b612710831061143057612710830492506004015b60648310611442576064830492506002015b600a8310610e5f5760010192915050565b82805461145f906119d3565b90600052602060002090601f01602090048101928261148157600085556114c7565b82601f1061149a57805160ff19168380011785556114c7565b828001600101855582156114c7579182015b828111156114c75782518255916020019190600101906114ac565b506114d39291506114d7565b5090565b5b808211156114d357600081556001016114d8565b73ffffffffffffffffffffffffffffffffffffffff8116811461150e57600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171561156457611564611511565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115b1576115b1611511565b604052919050565b600067ffffffffffffffff8211156115d3576115d3611511565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061161261160d846115b9565b61156a565b905082815283838301111561162657600080fd5b828260208301376000602084830101529392505050565b600082601f83011261164e57600080fd5b611217838335602085016115ff565b60008060006060848603121561167257600080fd5b833561167d816114ec565b9250602084013567ffffffffffffffff8082111561169a57600080fd5b6116a68783880161163d565b935060408601359150808211156116bc57600080fd5b506116c98682870161163d565b9150509250925092565b6000602082840312156116e557600080fd5b813567ffffffffffffffff8111156116fc57600080fd5b8201601f8101841361170d57600080fd5b61171c848235602084016115ff565b949350505050565b6000806040838503121561173757600080fd5b8235611742816114ec565b9150602083013567ffffffffffffffff81111561175e57600080fd5b61176a8582860161163d565b9150509250929050565b60006020828403121561178657600080fd5b8135611217816114ec565b60005b838110156117ac578181015183820152602001611794565b838111156117bb576000848401525b50505050565b600081518084526117d9816020860160208601611791565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60608152600061181e60608301866117c1565b828103602084015261183081866117c1565b905082810360408401526109e081856117c1565b60006020828403121561185657600080fd5b5035919050565b60208152600061121760208301846117c1565b8051801515811461188057600080fd5b919050565b60006020828403121561189757600080fd5b61121782611870565b73ffffffffffffffffffffffffffffffffffffffff841681526060602082015260006118cf60608301856117c1565b82810360408401526109e081856117c1565b600082601f8301126118f257600080fd5b815161190061160d826115b9565b81815284602083860101111561191557600080fd5b61171c826020830160208701611791565b60008060006060848603121561193b57600080fd5b835167ffffffffffffffff8082111561195357600080fd5b61195f878388016118e1565b9450602086015191508082111561197557600080fd5b611981878388016118e1565b9350604086015191508082111561199757600080fd5b506116c9868287016118e1565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061171c60408301846117c1565b600181811c908216806119e757607f821691505b602082108103611a20577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b805167ffffffffffffffff8116811461188057600080fd5b60006101608284031215611a5157600080fd5b611a59611540565b611a6283611870565b8152611a7060208401611870565b602082015260408301516040820152611a8b60608401611a26565b6060820152611a9c60808401611a26565b6080820152611aad60a08401611a26565b60a0820152611abe60c08401611a26565b60c082015260e0838101519082015261010080840151908201526101208084015190820152610140928301519281019290925250919050565b600060208284031215611b0957600080fd5b815167ffffffffffffffff811115611b2057600080fd5b61171c848285016118e1565b600060808284031215611b3e57600080fd5b6040516080810181811067ffffffffffffffff82111715611b6157611b61611511565b6040528251611b6f816114ec565b8152611b7d60208401611a26565b6020820152604083015161ffff81168114611b9757600080fd5b60408201526060830151611baa816114ec565b60608201529392505050565b60008151611bc8818560208601611791565b9290920192915050565b7f222c2022696d616765223a202200000000000000000000000000000000000000815260008251611c0a81600d850160208701611791565b91909101600d0192915050565b7f222c2022616e696d6174696f6e5f75726c223a20220000000000000000000000815260008251611c4f816015850160208701611791565b9190910160150192915050565b7f7b226e616d65223a2022000000000000000000000000000000000000000000008152600087516020611c9582600a8601838d01611791565b7f222c20226465736372697074696f6e223a202200000000000000000000000000600a928501928301528851611cd181601d8501848d01611791565b7f222c202273656c6c65725f6665655f62617369735f706f696e7473223a200000601d93909101928301528751611d0e81603b8501848c01611791565b7f2c20226665655f726563697069656e74223a2022000000000000000000000000603b93909101928301528651611d4b81604f8501848b01611791565b8651920191611d6081604f8501848a01611791565b8551920191611d7581604f8501848901611791565b611da7604f828501017f227d000000000000000000000000000000000000000000000000000000000000815260020190565b9b9a5050505050505050505050565b7f696d616765223a20220000000000000000000000000000000000000000000000815260008351611dee816009850160208801611791565b7f222c2022616e696d6174696f6e5f75726c223a202200000000000000000000006009918401918201528351611e2b81601e840160208801611791565b7f222c202200000000000000000000000000000000000000000000000000000000601e9290910191820152602201949350505050565b7f696d616765223a20220000000000000000000000000000000000000000000000815260008251611e99816009850160208701611791565b7f222c2022000000000000000000000000000000000000000000000000000000006009939091019283015250600d01919050565b7f616e696d6174696f6e5f75726c223a2022000000000000000000000000000000815260008251611f05816011850160208701611791565b7f222c2022000000000000000000000000000000000000000000000000000000006011939091019283015250601501919050565b7f2f00000000000000000000000000000000000000000000000000000000000000815260008251611f71816001850160208701611791565b9190910160010192915050565b7f7b226e616d65223a202200000000000000000000000000000000000000000000815260008851611fb681600a850160208d01611791565b7f2000000000000000000000000000000000000000000000000000000000000000600a918401918201528851611ff381600b840160208d01611791565b885191019061200981600b840160208c01611791565b8082019150507f222c20220000000000000000000000000000000000000000000000000000000080600b8301527f6465736372697074696f6e223a20220000000000000000000000000000000000600f830152875161206f81601e850160208c01611791565b601e92019182015261211a6120f16120eb6120c26120bc612093602287018c611bb6565b7f70726f70657274696573223a207b226e756d626572223a200000000000000000815260180190565b89611bb6565b7f2c20226e616d65223a20220000000000000000000000000000000000000000008152600b0190565b86611bb6565b7f227d7d0000000000000000000000000000000000000000000000000000000000815260030190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161216081601d850160208701611791565b91909101601d0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121d4576121d461216d565b500290565b600082198211156121ec576121ec61216d565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008161222f5761222f61216d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008261228b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa164736f6c634300080d000a",
  "devdoc": {
    "events": {
      "DescriptionUpdated(address,address,string)": {
        "details": "admin function indexer feedback"
      },
      "EditionInitialized(address,string,string,string)": {
        "details": "admin function indexer feedback"
      }
    },
    "kind": "dev",
    "methods": {
      "contractURI()": {
        "returns": {
          "_0": "contract uri (if set)"
        }
      },
      "initializeWithData(bytes)": {
        "params": {
          "data": "data to init with"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "to get uri for"
        },
        "returns": {
          "_0": "contract uri (if set)"
        }
      },
      "updateDescription(address,string)": {
        "params": {
          "newDescription": "new description",
          "target": "target description"
        }
      },
      "updateMediaURIs(address,string,string)": {
        "params": {
          "animationURI": "new animation uri address",
          "imageURI": "new image uri address",
          "target": "target for contract to update metadata for"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DescriptionUpdated(address,address,string)": {
        "notice": "Description updated for this edition"
      },
      "EditionInitialized(address,string,string,string)": {
        "notice": "Event for a new edition initialized"
      },
      "MediaURIsUpdated(address,address,string,string)": {
        "notice": "Event for updated Media URIs"
      }
    },
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "Contract URI information getter"
      },
      "initializeWithData(bytes)": {
        "notice": "Default initializer for edition data from a specific contract"
      },
      "tokenInfos(address)": {
        "notice": "Token information mapping storage"
      },
      "tokenURI(uint256)": {
        "notice": "Token URI information getter"
      },
      "updateDescription(address,string)": {
        "notice": "Admin function to update description"
      },
      "updateMediaURIs(address,string,string)": {
        "notice": "Update media URIs"
      }
    },
    "notice": "EditionMetadataRenderer for editions support",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15278,
        "contract": "contracts/drops/metadata/EditionMetadataRenderer.sol:EditionMetadataRenderer",
        "label": "tokenInfos",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(TokenEditionInfo)15241_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenEditionInfo)15241_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EditionMetadataRenderer.TokenEditionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenEditionInfo)15241_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenEditionInfo)15241_storage": {
        "encoding": "inplace",
        "label": "struct EditionMetadataRenderer.TokenEditionInfo",
        "members": [
          {
            "astId": 15236,
            "contract": "contracts/drops/metadata/EditionMetadataRenderer.sol:EditionMetadataRenderer",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 15238,
            "contract": "contracts/drops/metadata/EditionMetadataRenderer.sol:EditionMetadataRenderer",
            "label": "imageURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 15240,
            "contract": "contracts/drops/metadata/EditionMetadataRenderer.sol:EditionMetadataRenderer",
            "label": "animationURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}