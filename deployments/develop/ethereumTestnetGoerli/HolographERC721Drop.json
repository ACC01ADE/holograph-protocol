{
  "address": "0x14311A89BC077353D4533F1B71Af0340D3136831",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "Access_MissingRoleOrAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Access_OnlyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Access_WithdrawNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRecipientAddress",
          "type": "address"
        }
      ],
      "name": "Admin_InvalidFundRecipientAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedAddress",
          "type": "address"
        }
      ],
      "name": "Admin_InvalidUpgradeAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Admin_UnableToFinalizeNotOpenEdition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketFilterAddressNotSupportedForChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mint_SoldOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ONLY_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ONLY_PENDING_OWNER",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Presale_Inactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Presale_MerkleNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Presale_TooManyForAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Purchase_TooManyForAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "correctPrice",
          "type": "uint256"
        }
      ],
      "name": "Purchase_WrongPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemoteOperatorFilterRegistryCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Sale_Inactive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "maxRoyaltyBPS",
          "type": "uint16"
        }
      ],
      "name": "Setup_RoyaltyPercentageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Withdraw_FundsSendFailure",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changedBy",
          "type": "address"
        }
      ],
      "name": "FundsRecipientChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawnBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawnTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfMints",
          "type": "uint256"
        }
      ],
      "name": "OpenMintFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "potentialNewOwner",
          "type": "address"
        }
      ],
      "name": "OwnerCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "potentialNewOwner",
          "type": "address"
        }
      ],
      "name": "OwnerPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstPurchasedTokenId",
          "type": "uint256"
        }
      ],
      "name": "Sale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "changedBy",
          "type": "address"
        }
      ],
      "name": "SalesConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IMetadataRenderer",
          "name": "renderer",
          "type": "address"
        }
      ],
      "name": "UpdatedMetadataRenderer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALES_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "adminMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "adminMintAirdrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IMetadataRenderer",
          "name": "metadataRenderer",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "editionSize",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "royaltyBPS",
          "type": "uint16"
        },
        {
          "internalType": "address payable",
          "name": "fundsRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeOpenEdition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holographERC721TransferHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "holographFeeForAmount",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holographFeeManager",
      "outputs": [
        {
          "internalType": "contract IHolographFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initPayload",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "manageMarketFilterSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketFilterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataRenderer",
      "outputs": [
        {
          "internalType": "contract IMetadataRenderer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "mintedPerAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalMints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presaleMints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicMints",
              "type": "uint256"
            }
          ],
          "internalType": "struct IHolographERC721Drop.AddressMintDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "presaleMintsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "purchasePresale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "publicSaleActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "presaleActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "publicSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "publicSaleStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "publicSaleEnd",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "presaleStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "presaleEnd",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "presaleMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maxSalePurchasePerAddress",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalMinted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct IHolographERC721Drop.SaleDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesConfig",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "publicSalePrice",
          "type": "uint104"
        },
        {
          "internalType": "uint32",
          "name": "maxSalePurchasePerAddress",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "publicSaleStart",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "publicSaleEnd",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "presaleStart",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "presaleEnd",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "presaleMerkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newRecipientAddress",
          "type": "address"
        }
      ],
      "name": "setFundsRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMetadataRenderer",
          "name": "newRenderer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "setupRenderer",
          "type": "bytes"
        }
      ],
      "name": "setMetadataRenderer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint104",
          "name": "publicSalePrice",
          "type": "uint104"
        },
        {
          "internalType": "uint32",
          "name": "maxSalePurchasePerAddress",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "publicSaleStart",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "publicSaleEnd",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "presaleStart",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "presaleEnd",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "presaleMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setSaleConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "updateMarketFilterSettings",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x95fc217c2437b7e22165f1aa780bfacd4456372b7fd583f32dde3d71d83fd5d0",
  "receipt": {
    "to": "0x0C8aF56F7650a6E3685188d212044338c21d3F73",
    "from": "0xd078E391cBAEAa6C5785124a7207ff57d64604b7",
    "contractAddress": null,
    "transactionIndex": 30,
    "gasUsed": "5529443",
    "logsBloom": "0x
    "blockHash": "0x46a6d7349f2d15dfdbcf1f0f9e4d8853600ae8261feeceeff4f9600272a02a32",
    "transactionHash": "0x95fc217c2437b7e22165f1aa780bfacd4456372b7fd583f32dde3d71d83fd5d0",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 8465436,
        "transactionHash": "0x95fc217c2437b7e22165f1aa780bfacd4456372b7fd583f32dde3d71d83fd5d0",
        "address": "0x14311A89BC077353D4533F1B71Af0340D3136831",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d078e391cbaeaa6c5785124a7207ff57d64604b7",
          "0x0000000000000000000000000c8af56f7650a6e3685188d212044338c21d3f73"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x46a6d7349f2d15dfdbcf1f0f9e4d8853600ae8261feeceeff4f9600272a02a32"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 8465436,
        "transactionHash": "0x95fc217c2437b7e22165f1aa780bfacd4456372b7fd583f32dde3d71d83fd5d0",
        "address": "0x14311A89BC077353D4533F1B71Af0340D3136831",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d078e391cbaeaa6c5785124a7207ff57d64604b7"
        ],
        "data": "0x",
        "logIndex": 71,
        "blockHash": "0x46a6d7349f2d15dfdbcf1f0f9e4d8853600ae8261feeceeff4f9600272a02a32"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 8465436,
        "transactionHash": "0x95fc217c2437b7e22165f1aa780bfacd4456372b7fd583f32dde3d71d83fd5d0",
        "address": "0x4dAbF22d61B7CF3941818f3Be9a42302753d0FDA",
        "topics": [
          "0xf889a5cdc62274389379cbfade0f225b1d30b7395177fd6aeaab61662b1c6edf",
          "0x00000000000000000000000014311a89bc077353d4533f1b71af0340d3136831"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000c646563736372697074696f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008696d616765555249000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c616e696d6174696f6e5552490000000000000000000000000000000000000000",
        "logIndex": 72,
        "blockHash": "0x46a6d7349f2d15dfdbcf1f0f9e4d8853600ae8261feeceeff4f9600272a02a32"
      }
    ],
    "blockNumber": 8465436,
    "cumulativeGasUsed": "15292806",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "460c9c81ea6d5ccfd94ebee5fc859457",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"Access_MissingRoleOrAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Access_OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Access_WithdrawNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipientAddress\",\"type\":\"address\"}],\"name\":\"Admin_InvalidFundRecipientAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedAddress\",\"type\":\"address\"}],\"name\":\"Admin_InvalidUpgradeAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Admin_UnableToFinalizeNotOpenEdition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketFilterAddressNotSupportedForChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mint_SoldOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ONLY_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ONLY_PENDING_OWNER\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Presale_Inactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Presale_MerkleNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Presale_TooManyForAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Purchase_TooManyForAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"correctPrice\",\"type\":\"uint256\"}],\"name\":\"Purchase_WrongPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemoteOperatorFilterRegistryCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Sale_Inactive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxRoyaltyBPS\",\"type\":\"uint16\"}],\"name\":\"Setup_RoyaltyPercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdraw_FundsSendFailure\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"FundsRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawnBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawnTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"}],\"name\":\"OpenMintFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"potentialNewOwner\",\"type\":\"address\"}],\"name\":\"OwnerCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"potentialNewOwner\",\"type\":\"address\"}],\"name\":\"OwnerPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstPurchasedTokenId\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"SalesConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IMetadataRenderer\",\"name\":\"renderer\",\"type\":\"address\"}],\"name\":\"UpdatedMetadataRenderer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALES_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"adminMintAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IMetadataRenderer\",\"name\":\"metadataRenderer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"editionSize\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"fundsRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeOpenEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holographERC721TransferHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"holographFeeForAmount\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holographFeeManager\",\"outputs\":[{\"internalType\":\"contract IHolographFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initPayload\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"manageMarketFilterSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFilterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataRenderer\",\"outputs\":[{\"internalType\":\"contract IMetadataRenderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"mintedPerAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicMints\",\"type\":\"uint256\"}],\"internalType\":\"struct IHolographERC721Drop.AddressMintDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleMintsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"purchasePresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"publicSaleActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"presaleActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxSalePurchasePerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct IHolographERC721Drop.SaleDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesConfig\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"publicSalePrice\",\"type\":\"uint104\"},{\"internalType\":\"uint32\",\"name\":\"maxSalePurchasePerAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newRecipientAddress\",\"type\":\"address\"}],\"name\":\"setFundsRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadataRenderer\",\"name\":\"newRenderer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"setupRenderer\",\"type\":\"bytes\"}],\"name\":\"setMetadataRenderer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint104\",\"name\":\"publicSalePrice\",\"type\":\"uint104\"},{\"internalType\":\"uint32\",\"name\":\"maxSalePurchasePerAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setSaleConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"updateMarketFilterSettings\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"For drops: assumes 1. linear mint order, 2. max number of mints needs to be less than max_uint64\",\"errors\":{\"MarketFilterAddressNotSupportedForChain()\":[{\"details\":\"Used for enabling and disabling filter for the given chain.\"}],\"OperatorNotAllowed(address)\":[{\"details\":\"Used when strict enforcement of marketplaces for creator royalties is desired.\"}],\"RemoteOperatorFilterRegistryCallFailed()\":[{\"details\":\"Used for bubbling error up to clients.\"}]},\"kind\":\"dev\",\"methods\":{\"adminMint(address,uint256)\":{\"params\":{\"quantity\":\"quantity to mint\",\"recipient\":\"recipient to mint to\"}},\"adminMintAirdrop(address[])\":{\"details\":\"Mints multiple editions to the given list of addresses.\",\"params\":{\"recipients\":\"list of addresses to send the newly minted editions to\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Token ID to burn\"}},\"contractURI()\":{\"returns\":{\"_0\":\"Contract URI\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"holographFeeForAmount(uint256)\":{\"details\":\"Gets the holograph fee for amount of withdraw\",\"params\":{\"amount\":\"amount of funds to get fee for\"}},\"init(bytes)\":{\"details\":\"Initialize a new drop contract\"},\"isAdmin(address)\":{\"details\":\"Getter for admin role associated with the contract to handle metadata\",\"returns\":{\"_0\":\"boolean if address is admin\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Setup auto-approval for marketplace access to sell NFT      Still requires approval for module\",\"params\":{\"nftOwner\":\"owner of the nft\",\"operator\":\"operator wishing to transfer/burn/etc the NFTs\"}},\"manageMarketFilterSubscription(bool)\":{\"params\":{\"enable\":\"Enable filtering to non-royalty payout marketplaces\"}},\"mintedPerAddress(address)\":{\"details\":\"Number of NFTs the user has minted per address\",\"params\":{\"minter\":\"to get counts for\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"returns\":{\"_0\":\"user owner address\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"purchase(uint256)\":{\"details\":\"This allows the user to purchase/mint a edition at the given price in the contract.\"},\"purchasePresale(uint256,uint256,uint256,bytes32[])\":{\"params\":{\"maxQuantity\":\"max quantity that can be purchased via merkle proof #\",\"merkleProof\":\"proof for presale mint\",\"pricePerToken\":\"price that each token is purchased at\",\"quantity\":\"quantity to purchase\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Get royalty information for token\",\"params\":{\"_salePrice\":\"Sale price for the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"saleDetails()\":{\"returns\":{\"_0\":\"IHolographERC721Drop.SaleDetails sale information details\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setFundsRecipient(address)\":{\"params\":{\"newRecipientAddress\":\"new funds recipient address\"}},\"setMetadataRenderer(address,bytes)\":{\"params\":{\"newRenderer\":\"new renderer address to use\",\"setupRenderer\":\"data to setup new renderer with\"}},\"setOwner(address)\":{\"details\":\"Set new owner for royalties / opensea\",\"params\":{\"newOwner\":\"new owner to set\"}},\"setSaleConfiguration(uint104,uint32,uint64,uint64,uint64,uint64,bytes32)\":{\"details\":\"This sets the sales configuration\",\"params\":{\"maxSalePurchasePerAddress\":\"Max # of purchases (public) per address allowed\",\"presaleEnd\":\"unix timestamp when the presale ends\",\"presaleMerkleRoot\":\"merkle root for the presale information\",\"presaleStart\":\"unix timestamp when the presale starts\",\"publicSaleEnd\":\"unix timestamp when the public sale ends (set to 0 to disable)\",\"publicSalePrice\":\"New public sale price\",\"publicSaleStart\":\"unix timestamp when the public sale starts\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id to check if supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"id of token to get URI for\"},\"returns\":{\"_0\":\"Token URI\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateMarketFilterSettings(bytes)\":{\"params\":{\"args\":\"Calldata args to pass to the registry\"}}},\"stateVariables\":{\"FUNDS_SEND_GAS_LIMIT\":{\"details\":\"Gas limit to send funds\"},\"MAX_MINT_BATCH_SIZE\":{\"details\":\"This is the max mint batch size for the optimized ERC721A mint contract\"},\"_initialized\":{\"details\":\"keep track of initialization state (Initializable)\"},\"holographERC721TransferHelper\":{\"details\":\"HOLOGRAPH transfer helper address for auto-approval\"},\"holographFeeManager\":{\"details\":\"Holograph Fee Manager address\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Access_MissingRoleOrAdmin(bytes32)\":[{\"notice\":\"Missing the given role or admin access\"}],\"Access_OnlyAdmin()\":[{\"notice\":\"Only admin can access this function\"}],\"Access_WithdrawNotAllowed()\":[{\"notice\":\"Withdraw is not allowed by this user\"}],\"Admin_InvalidFundRecipientAddress(address)\":[{\"notice\":\"Invalid fund recipient adress\"}],\"Admin_InvalidUpgradeAddress(address)\":[{\"notice\":\"Invalid admin upgrade address\"}],\"Admin_UnableToFinalizeNotOpenEdition()\":[{\"notice\":\"Unable to finalize an edition not marked as open (size set to uint64_max_value)\"}],\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MarketFilterAddressNotSupportedForChain()\":[{\"notice\":\"Thrown when there is no active market filter address supported for the current chain\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"Mint_SoldOut()\":[{\"notice\":\"NFT sold out\"}],\"OperatorNotAllowed(address)\":[{\"notice\":\"Thrown when the operator for the contract is not allowed\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"Presale_Inactive()\":[{\"notice\":\"Presale is inactive\"}],\"Presale_MerkleNotApproved()\":[{\"notice\":\"Presale merkle root is invalid\"}],\"Presale_TooManyForAddress()\":[{\"notice\":\"Too many presale for address\"}],\"Purchase_TooManyForAddress()\":[{\"notice\":\"Too many purchase for address\"}],\"Purchase_WrongPrice(uint256)\":[{\"notice\":\"Wrong price for purchase\"}],\"RemoteOperatorFilterRegistryCallFailed()\":[{\"notice\":\"Used when the operator filter registry external call fails\"}],\"Sale_Inactive()\":[{\"notice\":\"Sale is inactive\"}],\"Setup_RoyaltyPercentageTooHigh(uint16)\":[{\"notice\":\"Royalty percentage too high\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"Withdraw_FundsSendFailure()\":[{\"notice\":\"Cannot withdraw funds due to ETH send failure.\"}]},\"events\":{\"FundsRecipientChanged(address,address)\":{\"notice\":\"Event emitted when the funds recipient is changed\"},\"FundsWithdrawn(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when the funds are withdrawn from the minting contract\"},\"OpenMintFinalized(address,uint256)\":{\"notice\":\"Event emitted when an open mint is finalized and further minting is closed forever on the contract.\"},\"Sale(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted for each sale\"},\"SalesConfigChanged(address)\":{\"notice\":\"Sales configuration has been changed\"},\"UpdatedMetadataRenderer(address,address)\":{\"notice\":\"Event emitted when metadata renderer is updated.\"}},\"kind\":\"user\",\"methods\":{\"MINTER_ROLE()\":{\"notice\":\"Access control roles\"},\"adminMint(address,uint256)\":{\"notice\":\"Admin mint tokens to a recipient for free\"},\"burn(uint256)\":{\"notice\":\"User burn function for token id\"},\"config()\":{\"notice\":\"Configuration for NFT minting contract storage\"},\"contractURI()\":{\"notice\":\"Contract URI Getter, proxies to metadataRenderer\"},\"finalizeOpenEdition()\":{\"notice\":\"Admin function to finalize and open edition sale\"},\"manageMarketFilterSubscription(bool)\":{\"notice\":\"Manage subscription for marketplace filtering based off royalty payouts.\"},\"metadataRenderer()\":{\"notice\":\"Getter for metadataRenderer contract\"},\"owner()\":{\"notice\":\"Simple override for owner interface.\"},\"purchasePresale(uint256,uint256,uint256,bytes32[])\":{\"notice\":\"Merkle-tree based presale purchase function\"},\"saleDetails()\":{\"notice\":\"Sale details\"},\"salesConfig()\":{\"notice\":\"Sales configuration\"},\"setFundsRecipient(address)\":{\"notice\":\"Set a different funds recipient\"},\"setMetadataRenderer(address,bytes)\":{\"notice\":\"Set a new metadata renderer\"},\"supportsInterface(bytes4)\":{\"notice\":\"ERC165 supports interface\"},\"tokenURI(uint256)\":{\"notice\":\"Token URI Getter, proxies to metadataRenderer\"},\"updateMarketFilterSettings(bytes)\":{\"notice\":\"Proxy to update market filter settings in the main registry contractsRequires admin permissions\"},\"withdraw()\":{\"notice\":\"This withdraws ETH from the contract to the contract owner.\"}},\"notice\":\"HOLOGRAPH NFT contract for Drops and Editions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/drops/HolographERC721Drop.sol\":\"HolographERC721Drop\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735393936343638323431\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":base64/=lib/base64/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/abstract/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n/*\\n\\n                         \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n                         \\u2502 HOLOGRAPH \\u2502\\n                         \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551                                                             \\u2551\\n\\u2551                            / ^ \\\\                            \\u2551\\n\\u2551                            ~~*~~            \\u00b8               \\u2551\\n\\u2551                         [ '<>:<>' ]         \\u2502\\u2591\\u2591\\u2591            \\u2551\\n\\u2551               \\u2554\\u2557           _/\\\"\\\\_           \\u2554\\u2563               \\u2551\\n\\u2551             \\u250c\\u2500\\u256c\\u256c\\u2500\\u2510          \\\"\\\"\\\"          \\u250c\\u2500\\u256c\\u256c\\u2500\\u2510             \\u2551\\n\\u2551          \\u250c\\u2500\\u252c\\u2518 \\u2560\\u2563 \\u2514\\u252c\\u2500\\u2510       \\\\_/       \\u250c\\u2500\\u252c\\u2518 \\u2560\\u2563 \\u2514\\u252c\\u2500\\u2510          \\u2551\\n\\u2551       \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2560\\u2563  \\u2502 \\u2514\\u252c\\u2500\\u2510           \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2560\\u2563  \\u2502 \\u2514\\u252c\\u2500\\u2510       \\u2551\\n\\u2551    \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510     \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510    \\u2551\\n\\u2551 \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2510 \\u250c\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510 \\u2551\\n\\u2560\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502\\u2514\\u00a4\\u2518\\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2563\\n\\u2551\\u2502  \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502   \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502  \\u2502\\u2551\\n\\u2560\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u256c\\u256c\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u256c\\u256c\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2563\\n\\u2560\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u256c\\u256c\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u256c\\u256c\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2563\\n\\u2551               \\u2560\\u2563                           \\u2560\\u2563               \\u2551\\n\\u2551               \\u2560\\u2563                           \\u2560\\u2563               \\u2551\\n\\u2551    ,          \\u2560\\u2563     ,        ,'      *    \\u2560\\u2563               \\u2551\\n\\u2551~~~~~^~~~~~~~~\\u250c\\u256c\\u256c\\u2510~~~^~~~~~~~~^^~~~~~~~~^~~\\u250c\\u256c\\u256c\\u2510~~~~~~~^~~~~~~\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2569\\u2569\\u2569\\u2569\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2569\\u2569\\u2569\\u2569\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n     - one protocol, one bridge = infinite possibilities -\\n\\n\\n ***************************************************************\\n\\n DISCLAIMER: U.S Patent Pending\\n\\n LICENSE: Holograph Limited Public License (H-LPL)\\n\\n https://holograph.xyz/licenses/h-lpl/1.0.0\\n\\n This license governs use of the accompanying software. If you\\n use the software, you accept this license. If you do not accept\\n the license, you are not permitted to use the software.\\n\\n 1. Definitions\\n\\n The terms \\\"reproduce,\\\" \\\"reproduction,\\\" \\\"derivative works,\\\" and\\n \\\"distribution\\\" have the same meaning here as under U.S.\\n copyright law. A \\\"contribution\\\" is the original software, or\\n any additions or changes to the software. A \\\"contributor\\\" is\\n any person that distributes its contribution under this\\n license. \\\"Licensed patents\\\" are a contributor\\u2019s patent claims\\n that read directly on its contribution.\\n\\n 2. Grant of Rights\\n\\n A) Copyright Grant- Subject to the terms of this license,\\n including the license conditions and limitations in sections 3\\n and 4, each contributor grants you a non-exclusive, worldwide,\\n royalty-free copyright license to reproduce its contribution,\\n prepare derivative works of its contribution, and distribute\\n its contribution or any derivative works that you create.\\n B) Patent Grant- Subject to the terms of this license,\\n including the license conditions and limitations in section 3,\\n each contributor grants you a non-exclusive, worldwide,\\n royalty-free license under its licensed patents to make, have\\n made, use, sell, offer for sale, import, and/or otherwise\\n dispose of its contribution in the software or derivative works\\n of the contribution in the software.\\n\\n 3. Conditions and Limitations\\n\\n A) No Trademark License- This license does not grant you rights\\n to use any contributors\\u2019 name, logo, or trademarks.\\n B) If you bring a patent claim against any contributor over\\n patents that you claim are infringed by the software, your\\n patent license from such contributor is terminated with\\n immediate effect.\\n C) If you distribute any portion of the software, you must\\n retain all copyright, patent, trademark, and attribution\\n notices that are present in the software.\\n D) If you distribute any portion of the software in source code\\n form, you may do so only under this license by including a\\n complete copy of this license with your distribution. If you\\n distribute any portion of the software in compiled or object\\n code form, you may only do so under a license that complies\\n with this license.\\n E) The software is licensed \\u201cas-is.\\u201d You bear all risks of\\n using it. The contributors give no express warranties,\\n guarantees, or conditions. You may have additional consumer\\n rights under your local laws which this license cannot change.\\n To the extent permitted under your local laws, the contributors\\n exclude all implied warranties, including those of\\n merchantability, fitness for a particular purpose and\\n non-infringement.\\n\\n 4. (F) Platform Limitation- The licenses granted in sections\\n 2.A & 2.B extend only to the software or derivative works that\\n you create that run on a Holograph system product.\\n\\n ***************************************************************\\n\\n*/\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interface/InitializableInterface.sol\\\";\\n\\n/**\\n * @title Initializable\\n * @author https://github.com/holographxyz\\n * @notice Use init instead of constructor\\n * @dev This allows for use of init function to make one time initializations without the need for a constructor\\n */\\nabstract contract Initializable is InitializableInterface {\\n  /**\\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.initialized')) - 1)\\n   */\\n  bytes32 constant _initializedSlot = 0x4e5f991bca30eca2d4643aaefa807e88f96a4a97398933d572a3c0d973004a01;\\n\\n  /**\\n   * @dev Constructor is left empty and init is used instead\\n   */\\n  constructor() {}\\n\\n  /**\\n   * @notice Used internally to initialize the contract instead of through a constructor\\n   * @dev This function is called by the deployer/factory when creating a contract\\n   * @param initPayload abi encoded payload to use for contract initilaization\\n   */\\n  function init(bytes memory initPayload) external virtual returns (bytes4);\\n\\n  function _isInitialized() internal view returns (bool initialized) {\\n    assembly {\\n      initialized := sload(_initializedSlot)\\n    }\\n  }\\n\\n  function _setInitialized() internal {\\n    assembly {\\n      sstore(_initializedSlot, 0x0000000000000000000000000000000000000000000000000000000000000001)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa55dc367285f96952dec56adfbfb48b6a4be31aef9ba0d30ad8c91023a572462\",\"license\":\"UNLICENSED\"},\"contracts/drops/HolographERC721Drop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../abstract/Initializable.sol\\\";\\n\\nimport {ERC721AUpgradeable} from \\\"./lib/erc721a-upgradeable/ERC721AUpgradeable.sol\\\";\\nimport {IERC721AUpgradeable} from \\\"./lib/erc721a-upgradeable/IERC721AUpgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"./lib/openzeppelin-contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"./lib/openzeppelin-contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"./lib/openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {MerkleProofUpgradeable} from \\\"./lib/openzeppelin-contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\n\\nimport {DropInitializer} from \\\"../struct/DropInitializer.sol\\\";\\n\\nimport {IHolographFeeManager} from \\\"./interfaces/IHolographFeeManager.sol\\\";\\nimport {IMetadataRenderer} from \\\"./interfaces/IMetadataRenderer.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"./interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {IHolographERC721Drop} from \\\"./interfaces/IHolographERC721Drop.sol\\\";\\nimport {IOwnable} from \\\"./interfaces/IOwnable.sol\\\";\\n\\nimport {OwnableSkeleton} from \\\"./utils/OwnableSkeleton.sol\\\";\\nimport {FundsReceiver} from \\\"./utils/FundsReceiver.sol\\\";\\nimport {PublicMulticall} from \\\"./utils/PublicMulticall.sol\\\";\\nimport {ERC721DropStorageV1} from \\\"./storage/ERC721DropStorageV1.sol\\\";\\n\\n/**\\n * @notice HOLOGRAPH NFT contract for Drops and Editions\\n *\\n * @dev For drops: assumes 1. linear mint order, 2. max number of mints needs to be less than max_uint64\\n *\\n */\\ncontract HolographERC721Drop is\\n  Initializable,\\n  ERC721AUpgradeable,\\n  IERC2981Upgradeable,\\n  ReentrancyGuardUpgradeable,\\n  AccessControlUpgradeable,\\n  IHolographERC721Drop,\\n  PublicMulticall,\\n  OwnableSkeleton,\\n  FundsReceiver,\\n  ERC721DropStorageV1\\n{\\n  /// @dev keep track of initialization state (Initializable)\\n  bool private _initialized;\\n  bool private _initializing;\\n\\n  /// @dev This is the max mint batch size for the optimized ERC721A mint contract\\n  uint256 constant MAX_MINT_BATCH_SIZE = 8;\\n\\n  /// @dev Gas limit to send funds\\n  uint256 constant FUNDS_SEND_GAS_LIMIT = 210_000;\\n\\n  /// @notice Access control roles\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n  bytes32 public constant SALES_MANAGER_ROLE = keccak256(\\\"SALES_MANAGER\\\");\\n\\n  /// @dev HOLOGRAPH transfer helper address for auto-approval\\n  address public holographERC721TransferHelper;\\n\\n  /// @dev Holograph Fee Manager address\\n  IHolographFeeManager public holographFeeManager;\\n\\n  /// @notice Max royalty BPS\\n  uint16 constant MAX_ROYALTY_BPS = 50_00;\\n\\n  address public marketFilterAddress;\\n\\n  IOperatorFilterRegistry public operatorFilterRegistry =\\n    IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n  /// @notice Only allow for users with admin access\\n  modifier onlyAdmin() {\\n    if (!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n      revert Access_OnlyAdmin();\\n    }\\n\\n    _;\\n  }\\n\\n  /// @notice Only a given role has access or admin\\n  /// @param role role to check for alongside the admin role\\n  modifier onlyRoleOrAdmin(bytes32 role) {\\n    if (!hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) && !hasRole(role, _msgSender())) {\\n      revert Access_MissingRoleOrAdmin(role);\\n    }\\n\\n    _;\\n  }\\n\\n  /// @notice Allows user to mint tokens at a quantity\\n  modifier canMintTokens(uint256 quantity) {\\n    if (quantity + _totalMinted() > config.editionSize) {\\n      revert Mint_SoldOut();\\n    }\\n\\n    _;\\n  }\\n\\n  function _presaleActive() internal view returns (bool) {\\n    return salesConfig.presaleStart <= block.timestamp && salesConfig.presaleEnd > block.timestamp;\\n  }\\n\\n  function _publicSaleActive() internal view returns (bool) {\\n    return salesConfig.publicSaleStart <= block.timestamp && salesConfig.publicSaleEnd > block.timestamp;\\n  }\\n\\n  /// @notice Presale active\\n  modifier onlyPresaleActive() {\\n    if (!_presaleActive()) {\\n      revert Presale_Inactive();\\n    }\\n\\n    _;\\n  }\\n\\n  /// @notice Public sale active\\n  modifier onlyPublicSaleActive() {\\n    if (!_publicSaleActive()) {\\n      revert Sale_Inactive();\\n    }\\n\\n    _;\\n  }\\n\\n  constructor() {}\\n\\n  /// @dev Initialize a new drop contract\\n  function init(bytes memory initPayload) external override returns (bytes4) {\\n    require(!_isInitialized(), \\\"HOLOGRAPH: already initialized\\\");\\n\\n    // TODO: OZ Initializable pattern (review)\\n    _initialized = false;\\n    _initializing = true;\\n\\n    DropInitializer memory initializer = abi.decode(initPayload, (DropInitializer));\\n    holographFeeManager = IHolographFeeManager(initializer.holographFeeManager);\\n    holographERC721TransferHelper = initializer.holographERC721TransferHelper;\\n    marketFilterAddress = initializer.marketFilterAddress;\\n\\n    // Setup ERC721A\\n    // Call to ERC721AUpgradeable init has been replaced with the following\\n    // __ERC721A_init(initializer.contractName, initializer.contractSymbol);\\n    _name = initializer.contractName;\\n    _symbol = initializer.contractSymbol;\\n    _currentIndex = _startTokenId();\\n\\n    // Setup AccessControl\\n    // TODO: OZ Initializable pattern. AccessControl does not set anything in _init_ (review)\\n    // Setup access control\\n    // __AccessControl_init();\\n    // Setup the owner role\\n    _setupRole(DEFAULT_ADMIN_ROLE, initializer.initialOwner);\\n    // Set ownership to original sender of contract call\\n    _setOwner(initializer.initialOwner);\\n\\n    if (initializer.setupCalls.length > 0) {\\n      // Setup temporary role\\n      _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n      // Execute setupCalls\\n      multicall(initializer.setupCalls);\\n      // Remove temporary role\\n      _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // TODO: OZ Initializable pattern. Need to initialize to _NOT_ENTERED (review)\\n    // Setup re-entracy guard\\n    // __ReentrancyGuard_init();\\n\\n    if (config.royaltyBPS > MAX_ROYALTY_BPS) {\\n      revert Setup_RoyaltyPercentageTooHigh(MAX_ROYALTY_BPS);\\n    }\\n\\n    // Setup config variables\\n    config.editionSize = initializer.editionSize;\\n    config.metadataRenderer = IMetadataRenderer(initializer.metadataRenderer);\\n    config.royaltyBPS = initializer.royaltyBPS;\\n    config.fundsRecipient = initializer.fundsRecipient;\\n\\n    // TODO: Need to make sure to initialize the metadata renderer\\n    IMetadataRenderer(initializer.metadataRenderer).initializeWithData(initializer.metadataRendererInit);\\n\\n    // TODO: OZ Initializable pattern (review)\\n    _initializing = false;\\n    _initialized = true;\\n\\n    // Holograph initialization\\n    _setInitialized();\\n    return InitializableInterface.init.selector;\\n  }\\n\\n  /// @notice Getter for last minted token ID (gets next token id and subtracts 1)\\n  function _lastMintedTokenId() internal view returns (uint256) {\\n    return _currentIndex - 1;\\n  }\\n\\n  /// @notice Start token ID for minting (1-100 vs 0-99)\\n  function _startTokenId() internal pure override returns (uint256) {\\n    return 1;\\n  }\\n\\n  /// @dev Getter for admin role associated with the contract to handle metadata\\n  /// @return boolean if address is admin\\n  function isAdmin(address user) external view returns (bool) {\\n    return hasRole(DEFAULT_ADMIN_ROLE, user);\\n  }\\n\\n  //        ,-.\\n  //        `-'\\n  //        /|\\\\\\n  //         |             ,----------.\\n  //        / \\\\            |ERC721Drop|\\n  //      Caller           `----+-----'\\n  //        |       burn()      |\\n  //        | ------------------>\\n  //        |                   |\\n  //        |                   |----.\\n  //        |                   |    | burn token\\n  //        |                   |<---'\\n  //      Caller           ,----+-----.\\n  //        ,-.            |ERC721Drop|\\n  //        `-'            `----------'\\n  //        /|\\\\\\n  //         |\\n  //        / \\\\\\n  /// @param tokenId Token ID to burn\\n  /// @notice User burn function for token id\\n  function burn(uint256 tokenId) public {\\n    _burn(tokenId, true);\\n  }\\n\\n  /// @dev Get royalty information for token\\n  /// @param _salePrice Sale price for the token\\n  function royaltyInfo(uint256, uint256 _salePrice)\\n    external\\n    view\\n    override\\n    returns (address receiver, uint256 royaltyAmount)\\n  {\\n    if (config.fundsRecipient == address(0)) {\\n      return (config.fundsRecipient, 0);\\n    }\\n    return (config.fundsRecipient, (_salePrice * config.royaltyBPS) / 10_000);\\n  }\\n\\n  /// @notice Sale details\\n  /// @return IHolographERC721Drop.SaleDetails sale information details\\n  function saleDetails() external view returns (IHolographERC721Drop.SaleDetails memory) {\\n    return\\n      IHolographERC721Drop.SaleDetails({\\n        publicSaleActive: _publicSaleActive(),\\n        presaleActive: _presaleActive(),\\n        publicSalePrice: salesConfig.publicSalePrice,\\n        publicSaleStart: salesConfig.publicSaleStart,\\n        publicSaleEnd: salesConfig.publicSaleEnd,\\n        presaleStart: salesConfig.presaleStart,\\n        presaleEnd: salesConfig.presaleEnd,\\n        presaleMerkleRoot: salesConfig.presaleMerkleRoot,\\n        totalMinted: _totalMinted(),\\n        maxSupply: config.editionSize,\\n        maxSalePurchasePerAddress: salesConfig.maxSalePurchasePerAddress\\n      });\\n  }\\n\\n  /// @dev Number of NFTs the user has minted per address\\n  /// @param minter to get counts for\\n  function mintedPerAddress(address minter)\\n    external\\n    view\\n    override\\n    returns (IHolographERC721Drop.AddressMintDetails memory)\\n  {\\n    return\\n      IHolographERC721Drop.AddressMintDetails({\\n        presaleMints: presaleMintsByAddress[minter],\\n        publicMints: _numberMinted(minter) - presaleMintsByAddress[minter],\\n        totalMints: _numberMinted(minter)\\n      });\\n  }\\n\\n  /// @dev Setup auto-approval for marketplace access to sell NFT\\n  ///      Still requires approval for module\\n  /// @param nftOwner owner of the nft\\n  /// @param operator operator wishing to transfer/burn/etc the NFTs\\n  function isApprovedForAll(address nftOwner, address operator)\\n    public\\n    view\\n    override(ERC721AUpgradeable)\\n    returns (bool)\\n  {\\n    if (operator == holographERC721TransferHelper) {\\n      return true;\\n    }\\n    return super.isApprovedForAll(nftOwner, operator);\\n  }\\n\\n  /// @dev Gets the holograph fee for amount of withdraw\\n  /// @param amount amount of funds to get fee for\\n  function holographFeeForAmount(uint256 amount) public returns (address payable, uint256) {\\n    (address payable recipient, uint256 bps) = holographFeeManager.getWithdrawFeesBps(address(this));\\n    return (recipient, (amount * bps) / 10_000);\\n  }\\n\\n  /**\\n   *** ---------------------------------- ***\\n   ***                                    ***\\n   ***     PUBLIC MINTING FUNCTIONS       ***\\n   ***                                    ***\\n   *** ---------------------------------- ***\\n   ***/\\n\\n  //                       ,-.\\n  //                       `-'\\n  //                       /|\\\\\\n  //                        |                       ,----------.\\n  //                       / \\\\                      |ERC721Drop|\\n  //                     Caller                     `----+-----'\\n  //                       |          purchase()         |\\n  //                       | ---------------------------->\\n  //                       |                             |\\n  //                       |                             |\\n  //          ___________________________________________________________\\n  //          ! ALT  /  drop has no tokens left for caller to mint?      !\\n  //          !_____/      |                             |               !\\n  //          !            |    revert Mint_SoldOut()    |               !\\n  //          !            | <----------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                             |\\n  //                       |                             |\\n  //          ___________________________________________________________\\n  //          ! ALT  /  public sale isn't active?        |               !\\n  //          !_____/      |                             |               !\\n  //          !            |    revert Sale_Inactive()   |               !\\n  //          !            | <----------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                             |\\n  //                       |                             |\\n  //          ___________________________________________________________\\n  //          ! ALT  /  inadequate funds sent?           |               !\\n  //          !_____/      |                             |               !\\n  //          !            | revert Purchase_WrongPrice()|               !\\n  //          !            | <----------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                             |\\n  //                       |                             |----.\\n  //                       |                             |    | mint tokens\\n  //                       |                             |<---'\\n  //                       |                             |\\n  //                       |                             |----.\\n  //                       |                             |    | emit IHolographERC721Drop.Sale()\\n  //                       |                             |<---'\\n  //                       |                             |\\n  //                       | return first minted token ID|\\n  //                       | <----------------------------\\n  //                     Caller                     ,----+-----.\\n  //                       ,-.                      |ERC721Drop|\\n  //                       `-'                      `----------'\\n  //                       /|\\\\\\n  //                        |\\n  //                       / \\\\\\n  /**\\n      @dev This allows the user to purchase/mint a edition\\n           at the given price in the contract.\\n     */\\n  function purchase(uint256 quantity)\\n    external\\n    payable\\n    nonReentrant\\n    canMintTokens(quantity)\\n    onlyPublicSaleActive\\n    returns (uint256)\\n  {\\n    uint256 salePrice = salesConfig.publicSalePrice;\\n\\n    if (msg.value != salePrice * quantity) {\\n      revert Purchase_WrongPrice(salePrice * quantity);\\n    }\\n\\n    // If max purchase per address == 0 there is no limit.\\n    // Any other number, the per address mint limit is that.\\n    if (\\n      salesConfig.maxSalePurchasePerAddress != 0 &&\\n      _numberMinted(_msgSender()) + quantity - presaleMintsByAddress[_msgSender()] >\\n      salesConfig.maxSalePurchasePerAddress\\n    ) {\\n      revert Purchase_TooManyForAddress();\\n    }\\n\\n    _mintNFTs(_msgSender(), quantity);\\n    uint256 firstMintedTokenId = _lastMintedTokenId() - quantity;\\n\\n    emit IHolographERC721Drop.Sale({\\n      to: _msgSender(),\\n      quantity: quantity,\\n      pricePerToken: salePrice,\\n      firstPurchasedTokenId: firstMintedTokenId\\n    });\\n    return firstMintedTokenId;\\n  }\\n\\n  /// @notice Function to mint NFTs\\n  /// @dev (important: Does not enforce max supply limit, enforce that limit earlier)\\n  /// @dev This batches in size of 8 as per recommended by ERC721A creators\\n  /// @param to address to mint NFTs to\\n  /// @param quantity number of NFTs to mint\\n  function _mintNFTs(address to, uint256 quantity) internal {\\n    do {\\n      uint256 toMint = quantity > MAX_MINT_BATCH_SIZE ? MAX_MINT_BATCH_SIZE : quantity;\\n      _mint({to: to, quantity: toMint});\\n      quantity -= toMint;\\n    } while (quantity > 0);\\n  }\\n\\n  //                       ,-.\\n  //                       `-'\\n  //                       /|\\\\\\n  //                        |                             ,----------.\\n  //                       / \\\\                            |ERC721Drop|\\n  //                     Caller                           `----+-----'\\n  //                       |         purchasePresale()         |\\n  //                       | ---------------------------------->\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  drop has no tokens left for caller to mint?            !\\n  //          !_____/      |                                   |               !\\n  //          !            |       revert Mint_SoldOut()       |               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  presale sale isn't active?             |               !\\n  //          !_____/      |                                   |               !\\n  //          !            |     revert Presale_Inactive()     |               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  merkle proof unapproved for caller?    |               !\\n  //          !_____/      |                                   |               !\\n  //          !            | revert Presale_MerkleNotApproved()|               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  inadequate funds sent?                 |               !\\n  //          !_____/      |                                   |               !\\n  //          !            |    revert Purchase_WrongPrice()   |               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |----.\\n  //                       |                                   |    | mint tokens\\n  //                       |                                   |<---'\\n  //                       |                                   |\\n  //                       |                                   |----.\\n  //                       |                                   |    | emit IHolographERC721Drop.Sale()\\n  //                       |                                   |<---'\\n  //                       |                                   |\\n  //                       |    return first minted token ID   |\\n  //                       | <----------------------------------\\n  //                     Caller                           ,----+-----.\\n  //                       ,-.                            |ERC721Drop|\\n  //                       `-'                            `----------'\\n  //                       /|\\\\\\n  //                        |\\n  //                       / \\\\\\n  /// @notice Merkle-tree based presale purchase function\\n  /// @param quantity quantity to purchase\\n  /// @param maxQuantity max quantity that can be purchased via merkle proof #\\n  /// @param pricePerToken price that each token is purchased at\\n  /// @param merkleProof proof for presale mint\\n  function purchasePresale(\\n    uint256 quantity,\\n    uint256 maxQuantity,\\n    uint256 pricePerToken,\\n    bytes32[] calldata merkleProof\\n  ) external payable nonReentrant canMintTokens(quantity) onlyPresaleActive returns (uint256) {\\n    if (\\n      !MerkleProofUpgradeable.verify(\\n        merkleProof,\\n        salesConfig.presaleMerkleRoot,\\n        keccak256(\\n          // address, uint256, uint256\\n          abi.encode(_msgSender(), maxQuantity, pricePerToken)\\n        )\\n      )\\n    ) {\\n      revert Presale_MerkleNotApproved();\\n    }\\n\\n    if (msg.value != pricePerToken * quantity) {\\n      revert Purchase_WrongPrice(pricePerToken * quantity);\\n    }\\n\\n    presaleMintsByAddress[_msgSender()] += quantity;\\n    if (presaleMintsByAddress[_msgSender()] > maxQuantity) {\\n      revert Presale_TooManyForAddress();\\n    }\\n\\n    _mintNFTs(_msgSender(), quantity);\\n    uint256 firstMintedTokenId = _lastMintedTokenId() - quantity;\\n\\n    emit IHolographERC721Drop.Sale({\\n      to: _msgSender(),\\n      quantity: quantity,\\n      pricePerToken: pricePerToken,\\n      firstPurchasedTokenId: firstMintedTokenId\\n    });\\n\\n    return firstMintedTokenId;\\n  }\\n\\n  /**\\n   *** ---------------------------------- ***\\n   ***                                    ***\\n   ***     ADMIN OPERATOR FILTERING       ***\\n   ***                                    ***\\n   *** ---------------------------------- ***\\n   ***/\\n\\n  /// @notice Proxy to update market filter settings in the main registry contracts\\n  /// @notice Requires admin permissions\\n  /// @param args Calldata args to pass to the registry\\n  function updateMarketFilterSettings(bytes calldata args) external onlyAdmin returns (bytes memory) {\\n    (bool success, bytes memory ret) = address(operatorFilterRegistry).call(args);\\n    if (!success) {\\n      revert RemoteOperatorFilterRegistryCallFailed();\\n    }\\n    return ret;\\n  }\\n\\n  /// @notice Manage subscription for marketplace filtering based off royalty payouts.\\n  /// @param enable Enable filtering to non-royalty payout marketplaces\\n  function manageMarketFilterSubscription(bool enable) external onlyAdmin {\\n    address self = address(this);\\n    if (marketFilterAddress == address(0)) {\\n      revert MarketFilterAddressNotSupportedForChain();\\n    }\\n    if (!operatorFilterRegistry.isRegistered(self) && enable) {\\n      operatorFilterRegistry.registerAndSubscribe(self, marketFilterAddress);\\n    } else if (enable) {\\n      operatorFilterRegistry.subscribe(self, marketFilterAddress);\\n    } else {\\n      operatorFilterRegistry.unsubscribe(self, false);\\n      operatorFilterRegistry.unregister(self);\\n    }\\n  }\\n\\n  /// @notice Hook to filter operators (no-op if no filters are registered)\\n  /// @dev Part of ERC721A token hooks\\n  /// @param from Transfer from user\\n  /// @param to Transfer to user\\n  /// @param startTokenId Token ID to start with\\n  /// @param quantity Quantity of token being transferred\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual override {\\n    if (from != msg.sender && address(operatorFilterRegistry).code.length > 0) {\\n      if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n        revert OperatorNotAllowed(msg.sender);\\n      }\\n    }\\n  }\\n\\n  /**\\n   *** ---------------------------------- ***\\n   ***                                    ***\\n   ***     ADMIN MINTING FUNCTIONS        ***\\n   ***                                    ***\\n   *** ---------------------------------- ***\\n   ***/\\n\\n  //                       ,-.\\n  //                       `-'\\n  //                       /|\\\\\\n  //                        |                             ,----------.\\n  //                       / \\\\                            |ERC721Drop|\\n  //                     Caller                           `----+-----'\\n  //                       |            adminMint()            |\\n  //                       | ---------------------------------->\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  caller is not admin or minter role?    |               !\\n  //          !_____/      |                                   |               !\\n  //          !            | revert Access_MissingRoleOrAdmin()|               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  drop has no tokens left for caller to mint?            !\\n  //          !_____/      |                                   |               !\\n  //          !            |       revert Mint_SoldOut()       |               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |----.\\n  //                       |                                   |    | mint tokens\\n  //                       |                                   |<---'\\n  //                       |                                   |\\n  //                       |    return last minted token ID    |\\n  //                       | <----------------------------------\\n  //                     Caller                           ,----+-----.\\n  //                       ,-.                            |ERC721Drop|\\n  //                       `-'                            `----------'\\n  //                       /|\\\\\\n  //                        |\\n  //                       / \\\\\\n  /// @notice Admin mint tokens to a recipient for free\\n  /// @param recipient recipient to mint to\\n  /// @param quantity quantity to mint\\n  function adminMint(address recipient, uint256 quantity)\\n    external\\n    onlyRoleOrAdmin(MINTER_ROLE)\\n    canMintTokens(quantity)\\n    returns (uint256)\\n  {\\n    _mintNFTs(recipient, quantity);\\n\\n    return _lastMintedTokenId();\\n  }\\n\\n  //                       ,-.\\n  //                       `-'\\n  //                       /|\\\\\\n  //                        |                             ,----------.\\n  //                       / \\\\                            |ERC721Drop|\\n  //                     Caller                           `----+-----'\\n  //                       |         adminMintAirdrop()        |\\n  //                       | ---------------------------------->\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  caller is not admin or minter role?    |               !\\n  //          !_____/      |                                   |               !\\n  //          !            | revert Access_MissingRoleOrAdmin()|               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  drop has no tokens left for recipients to mint?        !\\n  //          !_____/      |                                   |               !\\n  //          !            |       revert Mint_SoldOut()       |               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |\\n  //                       |                    _____________________________________\\n  //                       |                    ! LOOP  /  for all recipients        !\\n  //                       |                    !______/       |                     !\\n  //                       |                    !              |----.                !\\n  //                       |                    !              |    | mint tokens    !\\n  //                       |                    !              |<---'                !\\n  //                       |                    !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |    return last minted token ID    |\\n  //                       | <----------------------------------\\n  //                     Caller                           ,----+-----.\\n  //                       ,-.                            |ERC721Drop|\\n  //                       `-'                            `----------'\\n  //                       /|\\\\\\n  //                        |\\n  //                       / \\\\\\n  /// @dev Mints multiple editions to the given list of addresses.\\n  /// @param recipients list of addresses to send the newly minted editions to\\n  function adminMintAirdrop(address[] calldata recipients)\\n    external\\n    override\\n    onlyRoleOrAdmin(MINTER_ROLE)\\n    canMintTokens(recipients.length)\\n    returns (uint256)\\n  {\\n    uint256 currentId = _currentIndex;\\n    uint256 startAt = currentId;\\n\\n    unchecked {\\n      for (uint256 endAt = currentId + recipients.length; currentId < endAt; currentId++) {\\n        _mintNFTs(recipients[currentId - startAt], 1);\\n      }\\n    }\\n    return _lastMintedTokenId();\\n  }\\n\\n  /**\\n   *** ---------------------------------- ***\\n   ***                                    ***\\n   ***  ADMIN CONFIGURATION FUNCTIONS     ***\\n   ***                                    ***\\n   *** ---------------------------------- ***\\n   ***/\\n\\n  //                       ,-.\\n  //                       `-'\\n  //                       /|\\\\\\n  //                        |                    ,----------.\\n  //                       / \\\\                   |ERC721Drop|\\n  //                     Caller                  `----+-----'\\n  //                       |        setOwner()        |\\n  //                       | ------------------------->\\n  //                       |                          |\\n  //                       |                          |\\n  //          ________________________________________________________\\n  //          ! ALT  /  caller is not admin?          |               !\\n  //          !_____/      |                          |               !\\n  //          !            | revert Access_OnlyAdmin()|               !\\n  //          !            | <-------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                          |\\n  //                       |                          |----.\\n  //                       |                          |    | set owner\\n  //                       |                          |<---'\\n  //                     Caller                  ,----+-----.\\n  //                       ,-.                   |ERC721Drop|\\n  //                       `-'                   `----------'\\n  //                       /|\\\\\\n  //                        |\\n  //                       / \\\\\\n  /// @dev Set new owner for royalties / opensea\\n  /// @param newOwner new owner to set\\n  function setOwner(address newOwner) public onlyAdmin {\\n    _setOwner(newOwner);\\n  }\\n\\n  /// @notice Set a new metadata renderer\\n  /// @param newRenderer new renderer address to use\\n  /// @param setupRenderer data to setup new renderer with\\n  function setMetadataRenderer(IMetadataRenderer newRenderer, bytes memory setupRenderer) external onlyAdmin {\\n    config.metadataRenderer = newRenderer;\\n\\n    if (setupRenderer.length > 0) {\\n      newRenderer.initializeWithData(setupRenderer);\\n    }\\n\\n    emit UpdatedMetadataRenderer({sender: _msgSender(), renderer: newRenderer});\\n  }\\n\\n  //                       ,-.\\n  //                       `-'\\n  //                       /|\\\\\\n  //                        |                             ,----------.\\n  //                       / \\\\                            |ERC721Drop|\\n  //                     Caller                           `----+-----'\\n  //                       |      setSalesConfiguration()      |\\n  //                       | ---------------------------------->\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  caller is not admin?                   |               !\\n  //          !_____/      |                                   |               !\\n  //          !            | revert Access_MissingRoleOrAdmin()|               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |----.\\n  //                       |                                   |    | set funds recipient\\n  //                       |                                   |<---'\\n  //                       |                                   |\\n  //                       |                                   |----.\\n  //                       |                                   |    | emit FundsRecipientChanged()\\n  //                       |                                   |<---'\\n  //                     Caller                           ,----+-----.\\n  //                       ,-.                            |ERC721Drop|\\n  //                       `-'                            `----------'\\n  //                       /|\\\\\\n  //                        |\\n  //                       / \\\\\\n  /// @dev This sets the sales configuration\\n  /// @param publicSalePrice New public sale price\\n  /// @param maxSalePurchasePerAddress Max # of purchases (public) per address allowed\\n  /// @param publicSaleStart unix timestamp when the public sale starts\\n  /// @param publicSaleEnd unix timestamp when the public sale ends (set to 0 to disable)\\n  /// @param presaleStart unix timestamp when the presale starts\\n  /// @param presaleEnd unix timestamp when the presale ends\\n  /// @param presaleMerkleRoot merkle root for the presale information\\n  function setSaleConfiguration(\\n    uint104 publicSalePrice,\\n    uint32 maxSalePurchasePerAddress,\\n    uint64 publicSaleStart,\\n    uint64 publicSaleEnd,\\n    uint64 presaleStart,\\n    uint64 presaleEnd,\\n    bytes32 presaleMerkleRoot\\n  ) external onlyRoleOrAdmin(SALES_MANAGER_ROLE) {\\n    salesConfig.publicSalePrice = publicSalePrice;\\n    salesConfig.maxSalePurchasePerAddress = maxSalePurchasePerAddress;\\n    salesConfig.publicSaleStart = publicSaleStart;\\n    salesConfig.publicSaleEnd = publicSaleEnd;\\n    salesConfig.presaleStart = presaleStart;\\n    salesConfig.presaleEnd = presaleEnd;\\n    salesConfig.presaleMerkleRoot = presaleMerkleRoot;\\n\\n    emit SalesConfigChanged(_msgSender());\\n  }\\n\\n  //                       ,-.\\n  //                       `-'\\n  //                       /|\\\\\\n  //                        |                    ,----------.\\n  //                       / \\\\                   |ERC721Drop|\\n  //                     Caller                  `----+-----'\\n  //                       |        setOwner()        |\\n  //                       | ------------------------->\\n  //                       |                          |\\n  //                       |                          |\\n  //          ________________________________________________________\\n  //          ! ALT  /  caller is not admin or SALES_MANAGER_ROLE?    !\\n  //          !_____/      |                          |               !\\n  //          !            | revert Access_OnlyAdmin()|               !\\n  //          !            | <-------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                          |\\n  //                       |                          |----.\\n  //                       |                          |    | set sales configuration\\n  //                       |                          |<---'\\n  //                       |                          |\\n  //                       |                          |----.\\n  //                       |                          |    | emit SalesConfigChanged()\\n  //                       |                          |<---'\\n  //                     Caller                  ,----+-----.\\n  //                       ,-.                   |ERC721Drop|\\n  //                       `-'                   `----------'\\n  //                       /|\\\\\\n  //                        |\\n  //                       / \\\\\\n  /// @notice Set a different funds recipient\\n  /// @param newRecipientAddress new funds recipient address\\n  function setFundsRecipient(address payable newRecipientAddress) external onlyRoleOrAdmin(SALES_MANAGER_ROLE) {\\n    if (newRecipientAddress == address(0)) {\\n      revert Admin_InvalidFundRecipientAddress(newRecipientAddress);\\n    }\\n\\n    config.fundsRecipient = newRecipientAddress;\\n    emit FundsRecipientChanged(newRecipientAddress, _msgSender());\\n  }\\n\\n  //                       ,-.                  ,-.                      ,-.\\n  //                       `-'                  `-'                      `-'\\n  //                       /|\\\\                  /|\\\\                      /|\\\\\\n  //                        |                    |                        |                      ,----------.\\n  //                       / \\\\                  / \\\\                      / \\\\                     |ERC721Drop|\\n  //                     Caller            FeeRecipient            FundsRecipient                `----+-----'\\n  //                       |                    |           withdraw()   |                            |\\n  //                       | ------------------------------------------------------------------------->\\n  //                       |                    |                        |                            |\\n  //                       |                    |                        |                            |\\n  //          ________________________________________________________________________________________________________\\n  //          ! ALT  /  caller is not admin or manager?                  |                            |               !\\n  //          !_____/      |                    |                        |                            |               !\\n  //          !            |                    revert Access_WithdrawNotAllowed()                    |               !\\n  //          !            | <-------------------------------------------------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                    |                        |                            |\\n  //                       |                    |                   send fee amount                   |\\n  //                       |                    | <----------------------------------------------------\\n  //                       |                    |                        |                            |\\n  //                       |                    |                        |                            |\\n  //                       |                    |                        |             ____________________________________________________________\\n  //                       |                    |                        |             ! ALT  /  send unsuccesful?                                 !\\n  //                       |                    |                        |             !_____/        |                                            !\\n  //                       |                    |                        |             !              |----.                                       !\\n  //                       |                    |                        |             !              |    | revert Withdraw_FundsSendFailure()    !\\n  //                       |                    |                        |             !              |<---'                                       !\\n  //                       |                    |                        |             !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                    |                        |             !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                    |                        |                            |\\n  //                       |                    |                        | send remaining funds amount|\\n  //                       |                    |                        | <---------------------------\\n  //                       |                    |                        |                            |\\n  //                       |                    |                        |                            |\\n  //                       |                    |                        |             ____________________________________________________________\\n  //                       |                    |                        |             ! ALT  /  send unsuccesful?                                 !\\n  //                       |                    |                        |             !_____/        |                                            !\\n  //                       |                    |                        |             !              |----.                                       !\\n  //                       |                    |                        |             !              |    | revert Withdraw_FundsSendFailure()    !\\n  //                       |                    |                        |             !              |<---'                                       !\\n  //                       |                    |                        |             !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                    |                        |             !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                     Caller            FeeRecipient            FundsRecipient                ,----+-----.\\n  //                       ,-.                  ,-.                      ,-.                     |ERC721Drop|\\n  //                       `-'                  `-'                      `-'                     `----------'\\n  //                       /|\\\\                  /|\\\\                      /|\\\\\\n  //                        |                    |                        |\\n  //                       / \\\\                  / \\\\                      / \\\\\\n  /// @notice This withdraws ETH from the contract to the contract owner.\\n  function withdraw() external nonReentrant {\\n    address sender = _msgSender();\\n\\n    // Get fee amount\\n    uint256 funds = address(this).balance;\\n    (address payable feeRecipient, uint256 holographFee) = holographFeeForAmount(funds);\\n\\n    // Check if withdraw is allowed for sender\\n    if (\\n      !hasRole(DEFAULT_ADMIN_ROLE, sender) &&\\n      !hasRole(SALES_MANAGER_ROLE, sender) &&\\n      sender != feeRecipient &&\\n      sender != config.fundsRecipient\\n    ) {\\n      revert Access_WithdrawNotAllowed();\\n    }\\n\\n    // Payout HOLOGRAPH fee\\n    if (holographFee > 0) {\\n      (bool successFee, ) = feeRecipient.call{value: holographFee, gas: FUNDS_SEND_GAS_LIMIT}(\\\"\\\");\\n      if (!successFee) {\\n        revert Withdraw_FundsSendFailure();\\n      }\\n      funds -= holographFee;\\n    }\\n\\n    // Payout recipient\\n    (bool successFunds, ) = config.fundsRecipient.call{value: funds, gas: FUNDS_SEND_GAS_LIMIT}(\\\"\\\");\\n    if (!successFunds) {\\n      revert Withdraw_FundsSendFailure();\\n    }\\n\\n    // Emit event for indexing\\n    emit FundsWithdrawn(_msgSender(), config.fundsRecipient, funds, feeRecipient, holographFee);\\n  }\\n\\n  //                       ,-.\\n  //                       `-'\\n  //                       /|\\\\\\n  //                        |                             ,----------.\\n  //                       / \\\\                            |ERC721Drop|\\n  //                     Caller                           `----+-----'\\n  //                       |       finalizeOpenEdition()       |\\n  //                       | ---------------------------------->\\n  //                       |                                   |\\n  //                       |                                   |\\n  //          _________________________________________________________________\\n  //          ! ALT  /  caller is not admin or SALES_MANAGER_ROLE?             !\\n  //          !_____/      |                                   |               !\\n  //          !            | revert Access_MissingRoleOrAdmin()|               !\\n  //          !            | <----------------------------------               !\\n  //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |\\n  //                       |                    _______________________________________________________________________\\n  //                       |                    ! ALT  /  drop is not an open edition?                                 !\\n  //                       |                    !_____/        |                                                       !\\n  //                       |                    !              |----.                                                  !\\n  //                       |                    !              |    | revert Admin_UnableToFinalizeNotOpenEdition()    !\\n  //                       |                    !              |<---'                                                  !\\n  //                       |                    !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                    !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n  //                       |                                   |\\n  //                       |                                   |----.\\n  //                       |                                   |    | set config edition size\\n  //                       |                                   |<---'\\n  //                       |                                   |\\n  //                       |                                   |----.\\n  //                       |                                   |    | emit OpenMintFinalized()\\n  //                       |                                   |<---'\\n  //                     Caller                           ,----+-----.\\n  //                       ,-.                            |ERC721Drop|\\n  //                       `-'                            `----------'\\n  //                       /|\\\\\\n  //                        |\\n  //                       / \\\\\\n  /// @notice Admin function to finalize and open edition sale\\n  function finalizeOpenEdition() external onlyRoleOrAdmin(SALES_MANAGER_ROLE) {\\n    if (config.editionSize != type(uint64).max) {\\n      revert Admin_UnableToFinalizeNotOpenEdition();\\n    }\\n\\n    config.editionSize = uint64(_totalMinted());\\n    emit OpenMintFinalized(_msgSender(), config.editionSize);\\n  }\\n\\n  /**\\n   *** ---------------------------------- ***\\n   ***                                    ***\\n   ***      GENERAL GETTER FUNCTIONS      ***\\n   ***                                    ***\\n   *** ---------------------------------- ***\\n   ***/\\n\\n  /// @notice Simple override for owner interface.\\n  /// @return user owner address\\n  function owner() public view override(OwnableSkeleton, IHolographERC721Drop) returns (address) {\\n    return super.owner();\\n  }\\n\\n  /// @notice Contract URI Getter, proxies to metadataRenderer\\n  /// @return Contract URI\\n  function contractURI() external view returns (string memory) {\\n    return config.metadataRenderer.contractURI();\\n  }\\n\\n  /// @notice Getter for metadataRenderer contract\\n  function metadataRenderer() external view returns (IMetadataRenderer) {\\n    return IMetadataRenderer(config.metadataRenderer);\\n  }\\n\\n  /// @notice Token URI Getter, proxies to metadataRenderer\\n  /// @param tokenId id of token to get URI for\\n  /// @return Token URI\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    if (!_exists(tokenId)) {\\n      revert IERC721AUpgradeable.URIQueryForNonexistentToken();\\n    }\\n\\n    return config.metadataRenderer.tokenURI(tokenId);\\n  }\\n\\n  /// @notice ERC165 supports interface\\n  /// @param interfaceId interface id to check if supported\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(IERC165Upgradeable, ERC721AUpgradeable, AccessControlUpgradeable)\\n    returns (bool)\\n  {\\n    return\\n      super.supportsInterface(interfaceId) ||\\n      type(IOwnable).interfaceId == interfaceId ||\\n      type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n      type(IHolographERC721Drop).interfaceId == interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x49ccafb034caf0b7f480d713b088da51e4ac9d24f209d0dd192b98cd70df06de\",\"license\":\"MIT\"},\"contracts/drops/interfaces/IHolographERC721Drop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IMetadataRenderer} from \\\"../interfaces/IMetadataRenderer.sol\\\";\\n\\n/// @notice Interface for HOLOGRAPH Drops contract\\ninterface IHolographERC721Drop {\\n  // Access errors\\n  /// @notice Only admin can access this function\\n  error Access_OnlyAdmin();\\n  /// @notice Missing the given role or admin access\\n  error Access_MissingRoleOrAdmin(bytes32 role);\\n  /// @notice Withdraw is not allowed by this user\\n  error Access_WithdrawNotAllowed();\\n  /// @notice Cannot withdraw funds due to ETH send failure.\\n  error Withdraw_FundsSendFailure();\\n\\n  /// @notice Thrown when the operator for the contract is not allowed\\n  /// @dev Used when strict enforcement of marketplaces for creator royalties is desired.\\n  error OperatorNotAllowed(address operator);\\n\\n  /// @notice Thrown when there is no active market filter address supported for the current chain\\n  /// @dev Used for enabling and disabling filter for the given chain.\\n  error MarketFilterAddressNotSupportedForChain();\\n\\n  /// @notice Used when the operator filter registry external call fails\\n  /// @dev Used for bubbling error up to clients.\\n  error RemoteOperatorFilterRegistryCallFailed();\\n\\n  // Sale/Purchase errors\\n  /// @notice Sale is inactive\\n  error Sale_Inactive();\\n  /// @notice Presale is inactive\\n  error Presale_Inactive();\\n  /// @notice Presale merkle root is invalid\\n  error Presale_MerkleNotApproved();\\n  /// @notice Wrong price for purchase\\n  error Purchase_WrongPrice(uint256 correctPrice);\\n  /// @notice NFT sold out\\n  error Mint_SoldOut();\\n  /// @notice Too many purchase for address\\n  error Purchase_TooManyForAddress();\\n  /// @notice Too many presale for address\\n  error Presale_TooManyForAddress();\\n\\n  // Admin errors\\n  /// @notice Royalty percentage too high\\n  error Setup_RoyaltyPercentageTooHigh(uint16 maxRoyaltyBPS);\\n  /// @notice Invalid admin upgrade address\\n  error Admin_InvalidUpgradeAddress(address proposedAddress);\\n  /// @notice Invalid fund recipient adress\\n  error Admin_InvalidFundRecipientAddress(address newRecipientAddress);\\n  /// @notice Unable to finalize an edition not marked as open (size set to uint64_max_value)\\n  error Admin_UnableToFinalizeNotOpenEdition();\\n\\n  /// @notice Event emitted for each sale\\n  /// @param to address sale was made to\\n  /// @param quantity quantity of the minted nfts\\n  /// @param pricePerToken price for each token\\n  /// @param firstPurchasedTokenId first purchased token ID (to get range add to quantity for max)\\n  event Sale(\\n    address indexed to,\\n    uint256 indexed quantity,\\n    uint256 indexed pricePerToken,\\n    uint256 firstPurchasedTokenId\\n  );\\n\\n  /// @notice Sales configuration has been changed\\n  /// @dev To access new sales configuration, use getter function.\\n  /// @param changedBy Changed by user\\n  event SalesConfigChanged(address indexed changedBy);\\n\\n  /// @notice Event emitted when the funds recipient is changed\\n  /// @param newAddress new address for the funds recipient\\n  /// @param changedBy address that the recipient is changed by\\n  event FundsRecipientChanged(address indexed newAddress, address indexed changedBy);\\n\\n  /// @notice Event emitted when the funds are withdrawn from the minting contract\\n  /// @param withdrawnBy address that issued the withdraw\\n  /// @param withdrawnTo address that the funds were withdrawn to\\n  /// @param amount amount that was withdrawn\\n  /// @param feeRecipient user getting withdraw fee (if any)\\n  /// @param feeAmount amount of the fee getting sent (if any)\\n  event FundsWithdrawn(\\n    address indexed withdrawnBy,\\n    address indexed withdrawnTo,\\n    uint256 amount,\\n    address feeRecipient,\\n    uint256 feeAmount\\n  );\\n\\n  /// @notice Event emitted when an open mint is finalized and further minting is closed forever on the contract.\\n  /// @param sender address sending close mint\\n  /// @param numberOfMints number of mints the contract is finalized at\\n  event OpenMintFinalized(address indexed sender, uint256 numberOfMints);\\n\\n  /// @notice Event emitted when metadata renderer is updated.\\n  /// @param sender address of the updater\\n  /// @param renderer new metadata renderer address\\n  event UpdatedMetadataRenderer(address sender, IMetadataRenderer renderer);\\n\\n  /// @notice Admin function to update the sales configuration settings\\n  /// @param publicSalePrice public sale price in ether\\n  /// @param maxSalePurchasePerAddress Max # of purchases (public) per address allowed\\n  /// @param publicSaleStart unix timestamp when the public sale starts\\n  /// @param publicSaleEnd unix timestamp when the public sale ends (set to 0 to disable)\\n  /// @param presaleStart unix timestamp when the presale starts\\n  /// @param presaleEnd unix timestamp when the presale ends\\n  /// @param presaleMerkleRoot merkle root for the presale information\\n  function setSaleConfiguration(\\n    uint104 publicSalePrice,\\n    uint32 maxSalePurchasePerAddress,\\n    uint64 publicSaleStart,\\n    uint64 publicSaleEnd,\\n    uint64 presaleStart,\\n    uint64 presaleEnd,\\n    bytes32 presaleMerkleRoot\\n  ) external;\\n\\n  /// @notice General configuration for NFT Minting and bookkeeping\\n  struct Configuration {\\n    /// @dev Metadata renderer (uint160)\\n    IMetadataRenderer metadataRenderer;\\n    /// @dev Total size of edition that can be minted (uint160+64 = 224)\\n    uint64 editionSize;\\n    /// @dev Royalty amount in bps (uint224+16 = 240)\\n    uint16 royaltyBPS;\\n    /// @dev Funds recipient for sale (new slot, uint160)\\n    address payable fundsRecipient;\\n  }\\n\\n  /// @notice Sales states and configuration\\n  /// @dev Uses 3 storage slots\\n  struct SalesConfiguration {\\n    /// @dev Public sale price (max ether value > 1000 ether with this value)\\n    uint104 publicSalePrice;\\n    /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)\\n    /// @dev Max purchase number per txn (90+32 = 122)\\n    uint32 maxSalePurchasePerAddress;\\n    /// @dev uint64 type allows for dates into 292 billion years\\n    /// @notice Public sale start timestamp (136+64 = 186)\\n    uint64 publicSaleStart;\\n    /// @notice Public sale end timestamp (186+64 = 250)\\n    uint64 publicSaleEnd;\\n    /// @notice Presale start timestamp\\n    /// @dev new storage slot\\n    uint64 presaleStart;\\n    /// @notice Presale end timestamp\\n    uint64 presaleEnd;\\n    /// @notice Presale merkle root\\n    bytes32 presaleMerkleRoot;\\n  }\\n\\n  /// @notice Return value for sales details to use with front-ends\\n  struct SaleDetails {\\n    // Synthesized status variables for sale and presale\\n    bool publicSaleActive;\\n    bool presaleActive;\\n    // Price for public sale\\n    uint256 publicSalePrice;\\n    // Timed sale actions for public sale\\n    uint64 publicSaleStart;\\n    uint64 publicSaleEnd;\\n    // Timed sale actions for presale\\n    uint64 presaleStart;\\n    uint64 presaleEnd;\\n    // Merkle root (includes address, quantity, and price data for each entry)\\n    bytes32 presaleMerkleRoot;\\n    // Limit public sale to a specific number of mints per wallet\\n    uint256 maxSalePurchasePerAddress;\\n    // Information about the rest of the supply\\n    // Total that have been minted\\n    uint256 totalMinted;\\n    // The total supply available\\n    uint256 maxSupply;\\n  }\\n\\n  /// @notice Return type of specific mint counts and details per address\\n  struct AddressMintDetails {\\n    /// Number of total mints from the given address\\n    uint256 totalMints;\\n    /// Number of presale mints from the given address\\n    uint256 presaleMints;\\n    /// Number of public mints from the given address\\n    uint256 publicMints;\\n  }\\n\\n  /// @notice External purchase function (payable in eth)\\n  /// @param quantity to purchase\\n  /// @return first minted token ID\\n  function purchase(uint256 quantity) external payable returns (uint256);\\n\\n  /// @notice External purchase presale function (takes a merkle proof and matches to root) (payable in eth)\\n  /// @param quantity to purchase\\n  /// @param maxQuantity can purchase (verified by merkle root)\\n  /// @param pricePerToken price per token allowed (verified by merkle root)\\n  /// @param merkleProof input for merkle proof leaf verified by merkle root\\n  /// @return first minted token ID\\n  function purchasePresale(\\n    uint256 quantity,\\n    uint256 maxQuantity,\\n    uint256 pricePerToken,\\n    bytes32[] memory merkleProof\\n  ) external payable returns (uint256);\\n\\n  /// @notice Function to return the global sales details for the given drop\\n  function saleDetails() external view returns (SaleDetails memory);\\n\\n  /// @notice Function to return the specific sales details for a given address\\n  /// @param minter address for minter to return mint information for\\n  function mintedPerAddress(address minter) external view returns (AddressMintDetails memory);\\n\\n  /// @notice This is the opensea/public owner setting that can be set by the contract admin\\n  function owner() external view returns (address);\\n\\n  /// @notice Update the metadata renderer\\n  /// @param newRenderer new address for renderer\\n  /// @param setupRenderer data to call to bootstrap data for the new renderer (optional)\\n  function setMetadataRenderer(IMetadataRenderer newRenderer, bytes memory setupRenderer) external;\\n\\n  /// @notice This is an admin mint function to mint a quantity to a specific address\\n  /// @param to address to mint to\\n  /// @param quantity quantity to mint\\n  /// @return the id of the first minted NFT\\n  function adminMint(address to, uint256 quantity) external returns (uint256);\\n\\n  /// @notice This is an admin mint function to mint a single nft each to a list of addresses\\n  /// @param to list of addresses to mint an NFT each to\\n  /// @return the id of the first minted NFT\\n  function adminMintAirdrop(address[] memory to) external returns (uint256);\\n\\n  /// @dev Getter for admin role associated with the contract to handle metadata\\n  /// @return boolean if address is admin\\n  function isAdmin(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4cc58dd4967592821c6829e1cb877032ec99f795955226ec17260b3239b2468c\",\"license\":\"MIT\"},\"contracts/drops/interfaces/IHolographFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IHolographFeeManager {\\n  function getWithdrawFeesBps(address sender) external returns (address payable, uint256);\\n}\\n\",\"keccak256\":\"0x9361ef3e01e1f502031bd292a2279cd19bcafc5282c560cfea0621148a459a84\",\"license\":\"MIT\"},\"contracts/drops/interfaces/IMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IMetadataRenderer {\\n  function tokenURI(uint256) external view returns (string memory);\\n\\n  function contractURI() external view returns (string memory);\\n\\n  function initializeWithData(bytes memory initData) external;\\n}\\n\",\"keccak256\":\"0x198181176c0cbc5720b191440492b298c353754d172e2d864ab6596a52fbc07c\",\"license\":\"MIT\"},\"contracts/drops/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n  function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n  function register(address registrant) external;\\n\\n  function registerAndSubscribe(address registrant, address subscription) external;\\n\\n  function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n  function updateOperator(\\n    address registrant,\\n    address operator,\\n    bool filtered\\n  ) external;\\n\\n  function updateOperators(\\n    address registrant,\\n    address[] calldata operators,\\n    bool filtered\\n  ) external;\\n\\n  function updateCodeHash(\\n    address registrant,\\n    bytes32 codehash,\\n    bool filtered\\n  ) external;\\n\\n  function updateCodeHashes(\\n    address registrant,\\n    bytes32[] calldata codeHashes,\\n    bool filtered\\n  ) external;\\n\\n  function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n  function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n  function subscriptionOf(address addr) external returns (address registrant);\\n\\n  function subscribers(address registrant) external returns (address[] memory);\\n\\n  function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n  function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n  function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n  function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n  function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n  function filteredOperators(address addr) external returns (address[] memory);\\n\\n  function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n  function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n  function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n  function isRegistered(address addr) external returns (bool);\\n\\n  function codeHashOf(address addr) external returns (bytes32);\\n\\n  function unregister(address registrant) external;\\n}\\n\",\"keccak256\":\"0xe36ee4dccaab9c355e6b2af5c8407b8290f4f67be91801853a3e53fc3ac33560\",\"license\":\"MIT\"},\"contracts/drops/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This ownership interface matches OZ's ownable interface.\\n *\\n */\\ninterface IOwnable {\\n  error ONLY_OWNER();\\n  error ONLY_PENDING_OWNER();\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event OwnerPending(address indexed previousOwner, address indexed potentialNewOwner);\\n\\n  event OwnerCanceled(address indexed previousOwner, address indexed potentialNewOwner);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4696667d816e1efca2414a6cb8164f485cdbc45fbdcc541d9bf15bbd73e7cb40\",\"license\":\"MIT\"},\"contracts/drops/lib/erc721a-upgradeable/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC721AUpgradeable.sol\\\";\\nimport \\\"../openzeppelin-contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"../openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../openzeppelin-contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"../openzeppelin-contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721AUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string internal _name;\\n\\n    // Token symbol\\n    string internal _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex != end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x7829c5eec3ca11dc131f4feca3b2cd77c5dc148fbe6a287181a6a443a71f3824\",\"license\":\"MIT\"},\"contracts/drops/lib/erc721a-upgradeable/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../openzeppelin-contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"../openzeppelin-contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721AUpgradeable is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x672e21348249a23bad3c060319e6b3d38cb08f26e47f6873ad042933cacdcdc5\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    IAccessControlUpgradeable,\\n    ERC165Upgradeable\\n{\\n    function __AccessControl_init() internal onlyInitializing {}\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc6e6c10cfb2a55415fb3db9eb7adb753ba74addbfca6aed4bd93e426e67f4625\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xf710fb524203921ca2fca7201672900fbfb354a37b56dd3f4f2e1592b3edb999\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        // require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x00543be10d1c6532cc9d5a48493fec880ffb2449a1b2324cf5c9900dff9b0acb\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x6c4dd0c916c4d69014b1a430f5803d3ea1f35c1a8021aefafde55ca4c2d20c2a\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {}\\n\\n    function __Context_init_unchained() internal onlyInitializing {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d195f4fb42b15464ab01ae3fb99b6f5c88526ae9b4187f0774741ad0dc6d3d2\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa11b70c83ab745c0fbfe48e2edccbb9ded3de3ba9dd3b92ac2814ca5555179f0\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {}\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaae49561857f45b234927e952b0be026fa85f05b7fa073212e20b4130d73b917\",\"license\":\"MIT\"},\"contracts/drops/lib/openzeppelin-contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/drops/storage/ERC721DropStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IHolographERC721Drop} from \\\"../interfaces/IHolographERC721Drop.sol\\\";\\n\\ncontract ERC721DropStorageV1 {\\n  /// @notice Configuration for NFT minting contract storage\\n  IHolographERC721Drop.Configuration public config;\\n\\n  /// @notice Sales configuration\\n  IHolographERC721Drop.SalesConfiguration public salesConfig;\\n\\n  /// @dev Mapping for presale mint counts by address to allow public mint limit\\n  mapping(address => uint256) public presaleMintsByAddress;\\n}\\n\",\"keccak256\":\"0xf4a61814464f4e6a2965034f3371a8a2125473cc392b9e5651d1c1e9bb70130b\",\"license\":\"MIT\"},\"contracts/drops/utils/FundsReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/**\\n * @notice This allows this contract to receive native currency funds from other contracts\\n * Uses event logging for UI reasons.\\n */\\ncontract FundsReceiver {\\n  event FundsReceived(address indexed source, uint256 amount);\\n\\n  receive() external payable {\\n    emit FundsReceived(msg.sender, msg.value);\\n  }\\n}\\n\",\"keccak256\":\"0x271ab3303601e38a60dcb57f80d5562334149df9c59f1d9916ac519495b863f9\",\"license\":\"MIT\"},\"contracts/drops/utils/OwnableSkeleton.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This ownership interface matches OZ's ownable interface.\\n */\\ncontract OwnableSkeleton is IOwnable {\\n  address private _owner;\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  function _setOwner(address newAddress) internal {\\n    emit OwnershipTransferred(_owner, newAddress);\\n    _owner = newAddress;\\n  }\\n}\\n\",\"keccak256\":\"0x532143b6dbedd192aa28f0954ee89d12f1f6b285889081c28f83dd067afd167e\",\"license\":\"MIT\"},\"contracts/drops/utils/PublicMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/Address.sol\\\";\\n\\nabstract contract PublicMulticall {\\n  /**\\n   * @dev Receives and executes a batch of function calls on this contract.\\n   */\\n  function multicall(bytes[] memory data) public virtual returns (bytes[] memory results) {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      results[i] = Address.functionDelegateCall(address(this), data[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7990c2d7af95c54c1d2154af463834308dd8f84c50bad8f9d4888d83691ab514\",\"license\":\"MIT\"},\"contracts/interface/InitializableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n/*\\n\\n                         \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n                         \\u2502 HOLOGRAPH \\u2502\\n                         \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551                                                             \\u2551\\n\\u2551                            / ^ \\\\                            \\u2551\\n\\u2551                            ~~*~~            \\u00b8               \\u2551\\n\\u2551                         [ '<>:<>' ]         \\u2502\\u2591\\u2591\\u2591            \\u2551\\n\\u2551               \\u2554\\u2557           _/\\\"\\\\_           \\u2554\\u2563               \\u2551\\n\\u2551             \\u250c\\u2500\\u256c\\u256c\\u2500\\u2510          \\\"\\\"\\\"          \\u250c\\u2500\\u256c\\u256c\\u2500\\u2510             \\u2551\\n\\u2551          \\u250c\\u2500\\u252c\\u2518 \\u2560\\u2563 \\u2514\\u252c\\u2500\\u2510       \\\\_/       \\u250c\\u2500\\u252c\\u2518 \\u2560\\u2563 \\u2514\\u252c\\u2500\\u2510          \\u2551\\n\\u2551       \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2560\\u2563  \\u2502 \\u2514\\u252c\\u2500\\u2510           \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2560\\u2563  \\u2502 \\u2514\\u252c\\u2500\\u2510       \\u2551\\n\\u2551    \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510     \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510    \\u2551\\n\\u2551 \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2510 \\u250c\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510 \\u2551\\n\\u2560\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502\\u2514\\u00a4\\u2518\\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2563\\n\\u2551\\u2502  \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502   \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502  \\u2502\\u2551\\n\\u2560\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u256c\\u256c\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u256c\\u256c\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2563\\n\\u2560\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u256c\\u256c\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u256c\\u256c\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2563\\n\\u2551               \\u2560\\u2563                           \\u2560\\u2563               \\u2551\\n\\u2551               \\u2560\\u2563                           \\u2560\\u2563               \\u2551\\n\\u2551    ,          \\u2560\\u2563     ,        ,'      *    \\u2560\\u2563               \\u2551\\n\\u2551~~~~~^~~~~~~~~\\u250c\\u256c\\u256c\\u2510~~~^~~~~~~~~^^~~~~~~~~^~~\\u250c\\u256c\\u256c\\u2510~~~~~~~^~~~~~~\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2569\\u2569\\u2569\\u2569\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2569\\u2569\\u2569\\u2569\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n     - one protocol, one bridge = infinite possibilities -\\n\\n\\n ***************************************************************\\n\\n DISCLAIMER: U.S Patent Pending\\n\\n LICENSE: Holograph Limited Public License (H-LPL)\\n\\n https://holograph.xyz/licenses/h-lpl/1.0.0\\n\\n This license governs use of the accompanying software. If you\\n use the software, you accept this license. If you do not accept\\n the license, you are not permitted to use the software.\\n\\n 1. Definitions\\n\\n The terms \\\"reproduce,\\\" \\\"reproduction,\\\" \\\"derivative works,\\\" and\\n \\\"distribution\\\" have the same meaning here as under U.S.\\n copyright law. A \\\"contribution\\\" is the original software, or\\n any additions or changes to the software. A \\\"contributor\\\" is\\n any person that distributes its contribution under this\\n license. \\\"Licensed patents\\\" are a contributor\\u2019s patent claims\\n that read directly on its contribution.\\n\\n 2. Grant of Rights\\n\\n A) Copyright Grant- Subject to the terms of this license,\\n including the license conditions and limitations in sections 3\\n and 4, each contributor grants you a non-exclusive, worldwide,\\n royalty-free copyright license to reproduce its contribution,\\n prepare derivative works of its contribution, and distribute\\n its contribution or any derivative works that you create.\\n B) Patent Grant- Subject to the terms of this license,\\n including the license conditions and limitations in section 3,\\n each contributor grants you a non-exclusive, worldwide,\\n royalty-free license under its licensed patents to make, have\\n made, use, sell, offer for sale, import, and/or otherwise\\n dispose of its contribution in the software or derivative works\\n of the contribution in the software.\\n\\n 3. Conditions and Limitations\\n\\n A) No Trademark License- This license does not grant you rights\\n to use any contributors\\u2019 name, logo, or trademarks.\\n B) If you bring a patent claim against any contributor over\\n patents that you claim are infringed by the software, your\\n patent license from such contributor is terminated with\\n immediate effect.\\n C) If you distribute any portion of the software, you must\\n retain all copyright, patent, trademark, and attribution\\n notices that are present in the software.\\n D) If you distribute any portion of the software in source code\\n form, you may do so only under this license by including a\\n complete copy of this license with your distribution. If you\\n distribute any portion of the software in compiled or object\\n code form, you may only do so under a license that complies\\n with this license.\\n E) The software is licensed \\u201cas-is.\\u201d You bear all risks of\\n using it. The contributors give no express warranties,\\n guarantees, or conditions. You may have additional consumer\\n rights under your local laws which this license cannot change.\\n To the extent permitted under your local laws, the contributors\\n exclude all implied warranties, including those of\\n merchantability, fitness for a particular purpose and\\n non-infringement.\\n\\n 4. (F) Platform Limitation- The licenses granted in sections\\n 2.A & 2.B extend only to the software or derivative works that\\n you create that run on a Holograph system product.\\n\\n ***************************************************************\\n\\n*/\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @title Initializable\\n * @author https://github.com/holographxyz\\n * @notice Use init instead of constructor\\n * @dev This allows for use of init function to make one time initializations without the need of a constructor\\n */\\ninterface InitializableInterface {\\n  /**\\n   * @notice Used internally to initialize the contract instead of through a constructor\\n   * @dev This function is called by the deployer/factory when creating a contract\\n   * @param initPayload abi encoded payload to use for contract initilaization\\n   */\\n  function init(bytes memory initPayload) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x0a76fae986c5c18110ce2b1818c84ec28b7bf7f8fb00d20b39b8d7225fbd892d\",\"license\":\"UNLICENSED\"},\"contracts/struct/DropInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @param holographFeeManager Holograph Fee Manager\\n/// @param holographERC721TransferHelper Transfer helper\\n/// @param marketFilterDAOAddress Market filter DAO address - Manage subscription to the DAO for marketplace filtering based off royalty payouts.\\n/// @param contractName Contract name\\n/// @param contractSymbol Contract symbol\\n/// @param initialOwner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\\n/// @param fundsRecipient Wallet/user that receives funds from sale\\n/// @param editionSize Number of editions that can be minted in total. If type(uint64).max, unlimited editions can be minted as an open edition.\\n/// @param royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n/// @param setupCalls Bytes-encoded list of setup multicalls\\n/// @param metadataRenderer Renderer contract to use\\n/// @param metadataRendererInit Renderer data initial contract\\nstruct DropInitializer {\\n  address holographFeeManager;\\n  address holographERC721TransferHelper;\\n  address marketFilterAddress;\\n  string contractName;\\n  string contractSymbol;\\n  address initialOwner;\\n  address payable fundsRecipient;\\n  uint64 editionSize;\\n  uint16 royaltyBPS;\\n  bytes[] setupCalls;\\n  address metadataRenderer;\\n  bytes metadataRendererInit;\\n}\\n\",\"keccak256\":\"0x76c3c2e74b88f8d5199d34a3842d0059a4894abe1339d2fa886de1983725d1ff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "For drops: assumes 1. linear mint order, 2. max number of mints needs to be less than max_uint64",
    "errors": {
      "MarketFilterAddressNotSupportedForChain()": [
        {
          "details": "Used for enabling and disabling filter for the given chain."
        }
      ],
      "OperatorNotAllowed(address)": [
        {
          "details": "Used when strict enforcement of marketplaces for creator royalties is desired."
        }
      ],
      "RemoteOperatorFilterRegistryCallFailed()": [
        {
          "details": "Used for bubbling error up to clients."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "adminMint(address,uint256)": {
        "params": {
          "quantity": "quantity to mint",
          "recipient": "recipient to mint to"
        }
      },
      "adminMintAirdrop(address[])": {
        "details": "Mints multiple editions to the given list of addresses.",
        "params": {
          "recipients": "list of addresses to send the newly minted editions to"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "Token ID to burn"
        }
      },
      "contractURI()": {
        "returns": {
          "_0": "Contract URI"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "holographFeeForAmount(uint256)": {
        "details": "Gets the holograph fee for amount of withdraw",
        "params": {
          "amount": "amount of funds to get fee for"
        }
      },
      "init(bytes)": {
        "details": "Initialize a new drop contract"
      },
      "isAdmin(address)": {
        "details": "Getter for admin role associated with the contract to handle metadata",
        "returns": {
          "_0": "boolean if address is admin"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Setup auto-approval for marketplace access to sell NFT      Still requires approval for module",
        "params": {
          "nftOwner": "owner of the nft",
          "operator": "operator wishing to transfer/burn/etc the NFTs"
        }
      },
      "manageMarketFilterSubscription(bool)": {
        "params": {
          "enable": "Enable filtering to non-royalty payout marketplaces"
        }
      },
      "mintedPerAddress(address)": {
        "details": "Number of NFTs the user has minted per address",
        "params": {
          "minter": "to get counts for"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "returns": {
          "_0": "user owner address"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "purchase(uint256)": {
        "details": "This allows the user to purchase/mint a edition at the given price in the contract."
      },
      "purchasePresale(uint256,uint256,uint256,bytes32[])": {
        "params": {
          "maxQuantity": "max quantity that can be purchased via merkle proof #",
          "merkleProof": "proof for presale mint",
          "pricePerToken": "price that each token is purchased at",
          "quantity": "quantity to purchase"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Get royalty information for token",
        "params": {
          "_salePrice": "Sale price for the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "saleDetails()": {
        "returns": {
          "_0": "IHolographERC721Drop.SaleDetails sale information details"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setFundsRecipient(address)": {
        "params": {
          "newRecipientAddress": "new funds recipient address"
        }
      },
      "setMetadataRenderer(address,bytes)": {
        "params": {
          "newRenderer": "new renderer address to use",
          "setupRenderer": "data to setup new renderer with"
        }
      },
      "setOwner(address)": {
        "details": "Set new owner for royalties / opensea",
        "params": {
          "newOwner": "new owner to set"
        }
      },
      "setSaleConfiguration(uint104,uint32,uint64,uint64,uint64,uint64,bytes32)": {
        "details": "This sets the sales configuration",
        "params": {
          "maxSalePurchasePerAddress": "Max # of purchases (public) per address allowed",
          "presaleEnd": "unix timestamp when the presale ends",
          "presaleMerkleRoot": "merkle root for the presale information",
          "presaleStart": "unix timestamp when the presale starts",
          "publicSaleEnd": "unix timestamp when the public sale ends (set to 0 to disable)",
          "publicSalePrice": "New public sale price",
          "publicSaleStart": "unix timestamp when the public sale starts"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id to check if supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "id of token to get URI for"
        },
        "returns": {
          "_0": "Token URI"
        }
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateMarketFilterSettings(bytes)": {
        "params": {
          "args": "Calldata args to pass to the registry"
        }
      }
    },
    "stateVariables": {
      "FUNDS_SEND_GAS_LIMIT": {
        "details": "Gas limit to send funds"
      },
      "MAX_MINT_BATCH_SIZE": {
        "details": "This is the max mint batch size for the optimized ERC721A mint contract"
      },
      "_initialized": {
        "details": "keep track of initialization state (Initializable)"
      },
      "holographERC721TransferHelper": {
        "details": "HOLOGRAPH transfer helper address for auto-approval"
      },
      "holographFeeManager": {
        "details": "Holograph Fee Manager address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Access_MissingRoleOrAdmin(bytes32)": [
        {
          "notice": "Missing the given role or admin access"
        }
      ],
      "Access_OnlyAdmin()": [
        {
          "notice": "Only admin can access this function"
        }
      ],
      "Access_WithdrawNotAllowed()": [
        {
          "notice": "Withdraw is not allowed by this user"
        }
      ],
      "Admin_InvalidFundRecipientAddress(address)": [
        {
          "notice": "Invalid fund recipient adress"
        }
      ],
      "Admin_InvalidUpgradeAddress(address)": [
        {
          "notice": "Invalid admin upgrade address"
        }
      ],
      "Admin_UnableToFinalizeNotOpenEdition()": [
        {
          "notice": "Unable to finalize an edition not marked as open (size set to uint64_max_value)"
        }
      ],
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApprovalToCurrentOwner()": [
        {
          "notice": "The caller cannot approve to the current owner."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MarketFilterAddressNotSupportedForChain()": [
        {
          "notice": "Thrown when there is no active market filter address supported for the current chain"
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "Mint_SoldOut()": [
        {
          "notice": "NFT sold out"
        }
      ],
      "OperatorNotAllowed(address)": [
        {
          "notice": "Thrown when the operator for the contract is not allowed"
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "Presale_Inactive()": [
        {
          "notice": "Presale is inactive"
        }
      ],
      "Presale_MerkleNotApproved()": [
        {
          "notice": "Presale merkle root is invalid"
        }
      ],
      "Presale_TooManyForAddress()": [
        {
          "notice": "Too many presale for address"
        }
      ],
      "Purchase_TooManyForAddress()": [
        {
          "notice": "Too many purchase for address"
        }
      ],
      "Purchase_WrongPrice(uint256)": [
        {
          "notice": "Wrong price for purchase"
        }
      ],
      "RemoteOperatorFilterRegistryCallFailed()": [
        {
          "notice": "Used when the operator filter registry external call fails"
        }
      ],
      "Sale_Inactive()": [
        {
          "notice": "Sale is inactive"
        }
      ],
      "Setup_RoyaltyPercentageTooHigh(uint16)": [
        {
          "notice": "Royalty percentage too high"
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "Withdraw_FundsSendFailure()": [
        {
          "notice": "Cannot withdraw funds due to ETH send failure."
        }
      ]
    },
    "events": {
      "FundsRecipientChanged(address,address)": {
        "notice": "Event emitted when the funds recipient is changed"
      },
      "FundsWithdrawn(address,address,uint256,address,uint256)": {
        "notice": "Event emitted when the funds are withdrawn from the minting contract"
      },
      "OpenMintFinalized(address,uint256)": {
        "notice": "Event emitted when an open mint is finalized and further minting is closed forever on the contract."
      },
      "Sale(address,uint256,uint256,uint256)": {
        "notice": "Event emitted for each sale"
      },
      "SalesConfigChanged(address)": {
        "notice": "Sales configuration has been changed"
      },
      "UpdatedMetadataRenderer(address,address)": {
        "notice": "Event emitted when metadata renderer is updated."
      }
    },
    "kind": "user",
    "methods": {
      "MINTER_ROLE()": {
        "notice": "Access control roles"
      },
      "adminMint(address,uint256)": {
        "notice": "Admin mint tokens to a recipient for free"
      },
      "burn(uint256)": {
        "notice": "User burn function for token id"
      },
      "config()": {
        "notice": "Configuration for NFT minting contract storage"
      },
      "contractURI()": {
        "notice": "Contract URI Getter, proxies to metadataRenderer"
      },
      "finalizeOpenEdition()": {
        "notice": "Admin function to finalize and open edition sale"
      },
      "manageMarketFilterSubscription(bool)": {
        "notice": "Manage subscription for marketplace filtering based off royalty payouts."
      },
      "metadataRenderer()": {
        "notice": "Getter for metadataRenderer contract"
      },
      "owner()": {
        "notice": "Simple override for owner interface."
      },
      "purchasePresale(uint256,uint256,uint256,bytes32[])": {
        "notice": "Merkle-tree based presale purchase function"
      },
      "saleDetails()": {
        "notice": "Sale details"
      },
      "salesConfig()": {
        "notice": "Sales configuration"
      },
      "setFundsRecipient(address)": {
        "notice": "Set a different funds recipient"
      },
      "setMetadataRenderer(address,bytes)": {
        "notice": "Set a new metadata renderer"
      },
      "supportsInterface(bytes4)": {
        "notice": "ERC165 supports interface"
      },
      "tokenURI(uint256)": {
        "notice": "Token URI Getter, proxies to metadataRenderer"
      },
      "updateMarketFilterSettings(bytes)": {
        "notice": "Proxy to update market filter settings in the main registry contractsRequires admin permissions"
      },
      "withdraw()": {
        "notice": "This withdraws ETH from the contract to the contract owner."
      }
    },
    "notice": "HOLOGRAPH NFT contract for Drops and Editions",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11819,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11822,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14577,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14917,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9910,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 9912,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 9914,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_name",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 9916,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_symbol",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 9921,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_ownerships",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)11338_storage)"
      },
      {
        "astId": 9926,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_addressData",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(AddressData)11347_storage)"
      },
      {
        "astId": 9930,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9936,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11282,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "__gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)42_storage"
      },
      {
        "astId": 11895,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 11939,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11394,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)11389_storage)"
      },
      {
        "astId": 11693,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15889,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 15544,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "config",
        "offset": 0,
        "slot": "252",
        "type": "t_struct(Configuration)9489_storage"
      },
      {
        "astId": 15548,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "salesConfig",
        "offset": 0,
        "slot": "254",
        "type": "t_struct(SalesConfiguration)9511_storage"
      },
      {
        "astId": 15553,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "presaleMintsByAddress",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7702,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_initialized",
        "offset": 0,
        "slot": "258",
        "type": "t_bool"
      },
      {
        "astId": 7704,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "_initializing",
        "offset": 1,
        "slot": "258",
        "type": "t_bool"
      },
      {
        "astId": 7726,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "holographERC721TransferHelper",
        "offset": 2,
        "slot": "258",
        "type": "t_address"
      },
      {
        "astId": 7730,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "holographFeeManager",
        "offset": 0,
        "slot": "259",
        "type": "t_contract(IHolographFeeManager)9638"
      },
      {
        "astId": 7736,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "marketFilterAddress",
        "offset": 0,
        "slot": "260",
        "type": "t_address"
      },
      {
        "astId": 7742,
        "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "261",
        "type": "t_contract(IOperatorFilterRegistry)9852"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)42_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[42]",
        "numberOfBytes": "1344"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IHolographFeeManager)9638": {
        "encoding": "inplace",
        "label": "contract IHolographFeeManager",
        "numberOfBytes": "20"
      },
      "t_contract(IMetadataRenderer)9658": {
        "encoding": "inplace",
        "label": "contract IMetadataRenderer",
        "numberOfBytes": "20"
      },
      "t_contract(IOperatorFilterRegistry)9852": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)11347_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IERC721AUpgradeable.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)11347_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)11389_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)11389_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)11338_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC721AUpgradeable.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)11338_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)11347_storage": {
        "encoding": "inplace",
        "label": "struct IERC721AUpgradeable.AddressData",
        "members": [
          {
            "astId": 11340,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11342,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11344,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11346,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Configuration)9489_storage": {
        "encoding": "inplace",
        "label": "struct IHolographERC721Drop.Configuration",
        "members": [
          {
            "astId": 9479,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "metadataRenderer",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IMetadataRenderer)9658"
          },
          {
            "astId": 9482,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "editionSize",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9485,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "royaltyBPS",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9488,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "fundsRecipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)11389_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 11386,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 11388,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SalesConfiguration)9511_storage": {
        "encoding": "inplace",
        "label": "struct IHolographERC721Drop.SalesConfiguration",
        "members": [
          {
            "astId": 9492,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "publicSalePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 9495,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "maxSalePurchasePerAddress",
            "offset": 13,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9498,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "publicSaleStart",
            "offset": 17,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9501,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "publicSaleEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9504,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "presaleStart",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9507,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "presaleEnd",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9510,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "presaleMerkleRoot",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TokenOwnership)11338_storage": {
        "encoding": "inplace",
        "label": "struct IERC721AUpgradeable.TokenOwnership",
        "members": [
          {
            "astId": 11333,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11335,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11337,
            "contract": "contracts/drops/HolographERC721Drop.sol:HolographERC721Drop",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
